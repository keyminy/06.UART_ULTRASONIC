
UART_ULTRASONIC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000096  00800100  000008da  0000096e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000072a  00800196  00800196  00000a04  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000144d  00000000  00000000  00000b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c8b  00000000  00000000  00001fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009d0  00000000  00000000  00002c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  00003634  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061c  00000000  00000000  000038a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000037b  00000000  00000000  00003ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004237  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	75 c1       	rjmp	.+746    	; 0x32c <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	ab c1       	rjmp	.+854    	; 0x3a0 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	ad c2       	rjmp	.+1370   	; 0x5d4 <__vector_30>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ed       	ldi	r30, 0xDA	; 218
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 39       	cpi	r26, 0x96	; 150
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	28 e0       	ldi	r18, 0x08	; 8
  b4:	a6 e9       	ldi	r26, 0x96	; 150
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 3c       	cpi	r26, 0xC0	; 192
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	fd d0       	rcall	.+506    	; 0x2be <main>
  c4:	08 c4       	rjmp	.+2064   	; 0x8d6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <led_all_on_off>:
			i = 0;
			//PORTA = 0x00;
			*pjob = FLOWER_OFF;
		}else{
			PORTA |= bit_value<<i | bit_value>>i+1;
			i += 1;
  c8:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <ms_count>
  cc:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <ms_count+0x1>
  d0:	a0 91 a4 01 	lds	r26, 0x01A4	; 0x8001a4 <ms_count+0x2>
  d4:	b0 91 a5 01 	lds	r27, 0x01A5	; 0x8001a5 <ms_count+0x3>
  d8:	88 3e       	cpi	r24, 0xE8	; 232
  da:	93 40       	sbci	r25, 0x03	; 3
  dc:	a1 05       	cpc	r26, r1
  de:	b1 05       	cpc	r27, r1
  e0:	50 f0       	brcs	.+20     	; 0xf6 <led_all_on_off+0x2e>
  e2:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <ms_count>
  e6:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <ms_count+0x1>
  ea:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <ms_count+0x2>
  ee:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <ms_count+0x3>
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	8b bb       	out	0x1b, r24	; 27
  f6:	08 95       	ret

000000f8 <shift_left22right_keep_ledon>:
  f8:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <shift_timer>
  fc:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <shift_timer+0x1>
 100:	a0 91 a0 01 	lds	r26, 0x01A0	; 0x8001a0 <shift_timer+0x2>
 104:	b0 91 a1 01 	lds	r27, 0x01A1	; 0x8001a1 <shift_timer+0x3>
 108:	8c 32       	cpi	r24, 0x2C	; 44
 10a:	91 40       	sbci	r25, 0x01	; 1
 10c:	a1 05       	cpc	r26, r1
 10e:	b1 05       	cpc	r27, r1
 110:	28 f1       	brcs	.+74     	; 0x15c <shift_left22right_keep_ledon+0x64>
 112:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <shift_timer>
 116:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <shift_timer+0x1>
 11a:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <shift_timer+0x2>
 11e:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <shift_timer+0x3>
 122:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <i.2124>
 126:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <i.2124+0x1>
 12a:	28 30       	cpi	r18, 0x08	; 8
 12c:	31 05       	cpc	r19, r1
 12e:	34 f0       	brlt	.+12     	; 0x13c <shift_left22right_keep_ledon+0x44>
 130:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <i.2124+0x1>
 134:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <i.2124>
 138:	1b ba       	out	0x1b, r1	; 27
 13a:	08 95       	ret
 13c:	c9 01       	movw	r24, r18
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <i.2124+0x1>
 144:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <i.2124>
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <shift_left22right_keep_ledon+0x5a>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	2a 95       	dec	r18
 154:	e2 f7       	brpl	.-8      	; 0x14e <shift_left22right_keep_ledon+0x56>
 156:	9b b3       	in	r25, 0x1b	; 27
 158:	89 2b       	or	r24, r25
 15a:	8b bb       	out	0x1b, r24	; 27
 15c:	08 95       	ret

0000015e <shift_right22left_keep_ledon>:
 15e:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <shift_timer>
 162:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <shift_timer+0x1>
 166:	a0 91 a0 01 	lds	r26, 0x01A0	; 0x8001a0 <shift_timer+0x2>
 16a:	b0 91 a1 01 	lds	r27, 0x01A1	; 0x8001a1 <shift_timer+0x3>
 16e:	8c 32       	cpi	r24, 0x2C	; 44
 170:	91 40       	sbci	r25, 0x01	; 1
 172:	a1 05       	cpc	r26, r1
 174:	b1 05       	cpc	r27, r1
 176:	28 f1       	brcs	.+74     	; 0x1c2 <shift_right22left_keep_ledon+0x64>
 178:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <shift_timer>
 17c:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <shift_timer+0x1>
 180:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <shift_timer+0x2>
 184:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <shift_timer+0x3>
 188:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <i.2127>
 18c:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <i.2127+0x1>
 190:	28 30       	cpi	r18, 0x08	; 8
 192:	31 05       	cpc	r19, r1
 194:	34 f0       	brlt	.+12     	; 0x1a2 <shift_right22left_keep_ledon+0x44>
 196:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <i.2127+0x1>
 19a:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <i.2127>
 19e:	1b ba       	out	0x1b, r1	; 27
 1a0:	08 95       	ret
 1a2:	c9 01       	movw	r24, r18
 1a4:	01 96       	adiw	r24, 0x01	; 1
 1a6:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <i.2127+0x1>
 1aa:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <i.2127>
 1ae:	80 e8       	ldi	r24, 0x80	; 128
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <shift_right22left_keep_ledon+0x5a>
 1b4:	95 95       	asr	r25
 1b6:	87 95       	ror	r24
 1b8:	2a 95       	dec	r18
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <shift_right22left_keep_ledon+0x56>
 1bc:	9b b3       	in	r25, 0x1b	; 27
 1be:	89 2b       	or	r24, r25
 1c0:	8b bb       	out	0x1b, r24	; 27
 1c2:	08 95       	ret

000001c4 <flower_on2>:

void flower_on2(){
	static uint8_t bit_value = 0b00010000; //값을 유지해야한다
	static int i =0;
	
	if(shift_timer >= 300){
 1c4:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <shift_timer>
 1c8:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <shift_timer+0x1>
 1cc:	a0 91 a0 01 	lds	r26, 0x01A0	; 0x8001a0 <shift_timer+0x2>
 1d0:	b0 91 a1 01 	lds	r27, 0x01A1	; 0x8001a1 <shift_timer+0x3>
 1d4:	8c 32       	cpi	r24, 0x2C	; 44
 1d6:	91 40       	sbci	r25, 0x01	; 1
 1d8:	a1 05       	cpc	r26, r1
 1da:	b1 05       	cpc	r27, r1
 1dc:	88 f1       	brcs	.+98     	; 0x240 <flower_on2+0x7c>
		shift_timer = 0;
 1de:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <shift_timer>
 1e2:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <shift_timer+0x1>
 1e6:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <shift_timer+0x2>
 1ea:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <shift_timer+0x3>
		if(i >= 4){
 1ee:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <i.2136>
 1f2:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <i.2136+0x1>
 1f6:	84 30       	cpi	r24, 0x04	; 4
 1f8:	91 05       	cpc	r25, r1
 1fa:	34 f0       	brlt	.+12     	; 0x208 <flower_on2+0x44>
			i = 0;
 1fc:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <i.2136+0x1>
 200:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <i.2136>
			PORTA = 0x00;
 204:	1b ba       	out	0x1b, r1	; 27
 206:	08 95       	ret
		}else{
			PORTA |= bit_value<<i | bit_value>>i+1;
 208:	4b b3       	in	r20, 0x1b	; 27
 20a:	20 e1       	ldi	r18, 0x10	; 16
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	b9 01       	movw	r22, r18
 210:	08 2e       	mov	r0, r24
 212:	02 c0       	rjmp	.+4      	; 0x218 <flower_on2+0x54>
 214:	66 0f       	add	r22, r22
 216:	77 1f       	adc	r23, r23
 218:	0a 94       	dec	r0
 21a:	e2 f7       	brpl	.-8      	; 0x214 <flower_on2+0x50>
 21c:	01 96       	adiw	r24, 0x01	; 1
 21e:	02 c0       	rjmp	.+4      	; 0x224 <flower_on2+0x60>
 220:	35 95       	asr	r19
 222:	27 95       	ror	r18
 224:	8a 95       	dec	r24
 226:	e2 f7       	brpl	.-8      	; 0x220 <flower_on2+0x5c>
 228:	26 2b       	or	r18, r22
 22a:	24 2b       	or	r18, r20
 22c:	2b bb       	out	0x1b, r18	; 27
			i += 1;
 22e:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <i.2136>
 232:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <i.2136+0x1>
 236:	01 96       	adiw	r24, 0x01	; 1
 238:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <i.2136+0x1>
 23c:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <i.2136>
 240:	08 95       	ret

00000242 <flower_off2>:

void flower_off2(){
	static uint8_t bit_value = 0b11111111;	 //값을 유지해야한다
	static int i =0;
	//PORTA = bit_value;
	if(shift_timer >= 600){
 242:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <shift_timer>
 246:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <shift_timer+0x1>
 24a:	a0 91 a0 01 	lds	r26, 0x01A0	; 0x8001a0 <shift_timer+0x2>
 24e:	b0 91 a1 01 	lds	r27, 0x01A1	; 0x8001a1 <shift_timer+0x3>
 252:	88 35       	cpi	r24, 0x58	; 88
 254:	92 40       	sbci	r25, 0x02	; 2
 256:	a1 05       	cpc	r26, r1
 258:	b1 05       	cpc	r27, r1
 25a:	80 f1       	brcs	.+96     	; 0x2bc <flower_off2+0x7a>
		shift_timer = 0;
 25c:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <shift_timer>
 260:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <shift_timer+0x1>
 264:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <shift_timer+0x2>
 268:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <shift_timer+0x3>
		if(i >= 4){
 26c:	20 91 96 01 	lds	r18, 0x0196	; 0x800196 <__data_end>
 270:	30 91 97 01 	lds	r19, 0x0197	; 0x800197 <__data_end+0x1>
 274:	24 30       	cpi	r18, 0x04	; 4
 276:	31 05       	cpc	r19, r1
 278:	34 f0       	brlt	.+12     	; 0x286 <flower_off2+0x44>
			i = 0;
 27a:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <__data_end+0x1>
 27e:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <__data_end>
			PORTA = 0x00;
 282:	1b ba       	out	0x1b, r1	; 27
 284:	08 95       	ret
			}else{
			PORTA &= bit_value>>i & bit_value<<i;
 286:	3b b3       	in	r19, 0x1b	; 27
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	ac 01       	movw	r20, r24
 28e:	02 2e       	mov	r0, r18
 290:	02 c0       	rjmp	.+4      	; 0x296 <flower_off2+0x54>
 292:	55 95       	asr	r21
 294:	47 95       	ror	r20
 296:	0a 94       	dec	r0
 298:	e2 f7       	brpl	.-8      	; 0x292 <flower_off2+0x50>
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <flower_off2+0x5e>
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	2a 95       	dec	r18
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <flower_off2+0x5a>
 2a4:	84 23       	and	r24, r20
 2a6:	83 23       	and	r24, r19
 2a8:	8b bb       	out	0x1b, r24	; 27
			i += 1;
 2aa:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <__data_end>
 2ae:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <__data_end+0x1>
 2b2:	01 96       	adiw	r24, 0x01	; 1
 2b4:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <__data_end+0x1>
 2b8:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <__data_end>
 2bc:	08 95       	ret

000002be <main>:

int job = 5;

int main(void)
{
	init_timer0();
 2be:	2e d0       	rcall	.+92     	; 0x31c <init_timer0>
	init_uart0();
 2c0:	e1 d0       	rcall	.+450    	; 0x484 <init_uart0>
	init_uart1();
 2c2:	fb d1       	rcall	.+1014   	; 0x6ba <init_uart1>
 2c4:	82 e0       	ldi	r24, 0x02	; 2
	stdout = &OUTPUT; // 2. printf가 동작되도록 stdout에 OUTPUT파일 포인터를 assign한다.
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	90 93 bd 08 	sts	0x08BD, r25	; 0x8008bd <__iob+0x3>
 2cc:	80 93 bc 08 	sts	0x08BC, r24	; 0x8008bc <__iob+0x2>
 2d0:	78 94       	sei
	// fprintf(stdout,"test"); == printf("test\n");
	// scanf("%s",buff); --> stdin
	// fgets(input,100,stdin); //여기서 stdin이 가리키는 것은 키보드입니다.
	
	sei(); // 전역적으로 인터럽트를 허용하겠다
 2d2:	8f ef       	ldi	r24, 0xFF	; 255
	
	//led A레지스터
	DDRA = 0xff; //출력모드 설정
 2d4:	8a bb       	out	0x1a, r24	; 26
 2d6:	1b ba       	out	0x1b, r1	; 27
	PORTA = 0x00; // led all off
	
	/* UART통신, main의 while문 진입전 테스트*/
	printf("UART TEST!!!!\n");
 2d8:	80 e1       	ldi	r24, 0x10	; 16
 2da:	91 e0       	ldi	r25, 0x01	; 1

    while (1) 
    {
		// UART ISR에서, rx_ready_flag = 1;된후 
		// command parsing작업 필요
		pc_command_processing();
 2dc:	cc d2       	rcall	.+1432   	; 0x876 <puts>
 2de:	e6 d0       	rcall	.+460    	; 0x4ac <pc_command_processing>
		bit_command_processing();
 2e0:	01 d2       	rcall	.+1026   	; 0x6e4 <bit_command_processing>
 2e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		switch(job)
 2e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2ea:	82 30       	cpi	r24, 0x02	; 2
 2ec:	91 05       	cpc	r25, r1
 2ee:	81 f0       	breq	.+32     	; 0x310 <main+0x52>
 2f0:	2c f4       	brge	.+10     	; 0x2fc <main+0x3e>
 2f2:	00 97       	sbiw	r24, 0x00	; 0
 2f4:	49 f0       	breq	.+18     	; 0x308 <main+0x4a>
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	49 f0       	breq	.+18     	; 0x30c <main+0x4e>
 2fa:	f1 cf       	rjmp	.-30     	; 0x2de <main+0x20>
 2fc:	83 30       	cpi	r24, 0x03	; 3
 2fe:	91 05       	cpc	r25, r1
 300:	49 f0       	breq	.+18     	; 0x314 <main+0x56>
 302:	04 97       	sbiw	r24, 0x04	; 4
 304:	49 f0       	breq	.+18     	; 0x318 <main+0x5a>
		{
			case LEFT2RIGHT :
			shift_left22right_keep_ledon();
 306:	eb cf       	rjmp	.-42     	; 0x2de <main+0x20>
			break;
			case RIGHT2LEFT :
			shift_right22left_keep_ledon();
 308:	f7 de       	rcall	.-530    	; 0xf8 <shift_left22right_keep_ledon>
 30a:	e9 cf       	rjmp	.-46     	; 0x2de <main+0x20>
			break;
 30c:	28 df       	rcall	.-432    	; 0x15e <shift_right22left_keep_ledon>
			case FLOWER_ON :
			flower_on2();
 30e:	e7 cf       	rjmp	.-50     	; 0x2de <main+0x20>
 310:	59 df       	rcall	.-334    	; 0x1c4 <flower_on2>
			break;
 312:	e5 cf       	rjmp	.-54     	; 0x2de <main+0x20>
			case FLOWER_OFF :
			flower_off2();
 314:	96 df       	rcall	.-212    	; 0x242 <flower_off2>
 316:	e3 cf       	rjmp	.-58     	; 0x2de <main+0x20>
			break;
 318:	d7 de       	rcall	.-594    	; 0xc8 <led_all_on_off>
			case ON_OFF:
			led_all_on_off();
 31a:	e1 cf       	rjmp	.-62     	; 0x2de <main+0x20>

0000031c <init_timer0>:
	// 3. 8bit timer overflow : 0.004ms * 256개 카운트 = 0.001024sec = 1.024ms
	// 1ms가 정확히 안되자너... 1ms가 정확히 될려면 어떻게 해야하나?
	// 0.004ms * 250 = 0.001(=1ms)
	
	//진짜 나중에 추가한 코드임
	TCNT0 = 6; // 6부터 count하는것임, TCNT : 0~256카운트하기때문에, 정확히 1ms마다 TIMER0_OVF_vect로 진입한다.
 31c:	86 e0       	ldi	r24, 0x06	; 6
 31e:	82 bf       	out	0x32, r24	; 50
	
	TCCR0 |= (1 << CS02) | (0 << CS01) | (0 << CS00); // (1)분주비 64로 셋팅(p.296 표13-1 참고)
 320:	83 b7       	in	r24, 0x33	; 51
 322:	84 60       	ori	r24, 0x04	; 4
 324:	83 bf       	out	0x33, r24	; 51
	TIMSK = 1 << TOIE0; // (2) TIMER0 overflow interrupt허용
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	87 bf       	out	0x37, r24	; 55
 32a:	08 95       	ret

0000032c <__vector_16>:
}

// 256개의 pulse(=1ms)를 count하면 이곳으로 자동적으로 진입한다.
// 즉, 256개의 pulse == 1ms
ISR(TIMER0_OVF_vect){
 32c:	1f 92       	push	r1
 32e:	0f 92       	push	r0
 330:	0f b6       	in	r0, 0x3f	; 63
 332:	0f 92       	push	r0
 334:	11 24       	eor	r1, r1
 336:	8f 93       	push	r24
 338:	9f 93       	push	r25
 33a:	af 93       	push	r26
 33c:	bf 93       	push	r27
	/* 인터럽트 루틴을 가능한 짧게 짜라, ms_count만 증가시키고 빠져나오게함 */
	TCNT0=6; // 6 ~ 256개의 pulse카운트 --> 1ms를 맞춰주기 위해서 TCNT0을 6으로 설정
 33e:	86 e0       	ldi	r24, 0x06	; 6
 340:	82 bf       	out	0x32, r24	; 50
	ms_count++;
 342:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <ms_count>
 346:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <ms_count+0x1>
 34a:	a0 91 a4 01 	lds	r26, 0x01A4	; 0x8001a4 <ms_count+0x2>
 34e:	b0 91 a5 01 	lds	r27, 0x01A5	; 0x8001a5 <ms_count+0x3>
 352:	01 96       	adiw	r24, 0x01	; 1
 354:	a1 1d       	adc	r26, r1
 356:	b1 1d       	adc	r27, r1
 358:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <ms_count>
 35c:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <ms_count+0x1>
 360:	a0 93 a4 01 	sts	0x01A4, r26	; 0x8001a4 <ms_count+0x2>
 364:	b0 93 a5 01 	sts	0x01A5, r27	; 0x8001a5 <ms_count+0x3>
	//ms_count delay없애는 작업필요함
	shift_timer++;
 368:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <shift_timer>
 36c:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <shift_timer+0x1>
 370:	a0 91 a0 01 	lds	r26, 0x01A0	; 0x8001a0 <shift_timer+0x2>
 374:	b0 91 a1 01 	lds	r27, 0x01A1	; 0x8001a1 <shift_timer+0x3>
 378:	01 96       	adiw	r24, 0x01	; 1
 37a:	a1 1d       	adc	r26, r1
 37c:	b1 1d       	adc	r27, r1
 37e:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <shift_timer>
 382:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <shift_timer+0x1>
 386:	a0 93 a0 01 	sts	0x01A0, r26	; 0x8001a0 <shift_timer+0x2>
 38a:	b0 93 a1 01 	sts	0x01A1, r27	; 0x8001a1 <shift_timer+0x3>
}
 38e:	bf 91       	pop	r27
 390:	af 91       	pop	r26
 392:	9f 91       	pop	r25
 394:	8f 91       	pop	r24
 396:	0f 90       	pop	r0
 398:	0f be       	out	0x3f, r0	; 63
 39a:	0f 90       	pop	r0
 39c:	1f 90       	pop	r1
 39e:	18 95       	reti

000003a0 <__vector_18>:

// 3.RX인터럽트(수신) : interrupt를 활성화 시킬거야
// 인터럽트벡터 서비스루틴은 선언할 필요없고,제어만 해주면됨
// ISR : HW와 SW의 만남의 장소, 인터럽트가 뜨면 여기로 들어와라
// 1byte를 수신 할때 마다 이곳으로 들어온다.
ISR(USART0_RX_vect){
 3a0:	1f 92       	push	r1
 3a2:	0f 92       	push	r0
 3a4:	0f b6       	in	r0, 0x3f	; 63
 3a6:	0f 92       	push	r0
 3a8:	11 24       	eor	r1, r1
 3aa:	0b b6       	in	r0, 0x3b	; 59
 3ac:	0f 92       	push	r0
 3ae:	2f 93       	push	r18
 3b0:	3f 93       	push	r19
 3b2:	4f 93       	push	r20
 3b4:	5f 93       	push	r21
 3b6:	6f 93       	push	r22
 3b8:	7f 93       	push	r23
 3ba:	8f 93       	push	r24
 3bc:	9f 93       	push	r25
 3be:	af 93       	push	r26
 3c0:	bf 93       	push	r27
 3c2:	ef 93       	push	r30
 3c4:	ff 93       	push	r31
	static int i=0;
	// 1byte를 읽어 처리할 로직을 여기넣음
	uint8_t data;
	
	data = UDR0; //UART0의 hardware register(UDR0)로 부터 1byte를 읽어간다.
 3c6:	8c b1       	in	r24, 0x0c	; 12

	if(data == '\r' || data == '\n'){
 3c8:	8d 30       	cpi	r24, 0x0D	; 13
 3ca:	11 f0       	breq	.+4      	; 0x3d0 <__vector_18+0x30>
 3cc:	8a 30       	cpi	r24, 0x0A	; 10
 3ce:	61 f5       	brne	.+88     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		rx_Quebuff[rear][i] = '\0'; //문장의 끝을 알리는 null sign을 insert함.
 3d0:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <rear>
 3d4:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <rear+0x1>
 3d8:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <i.2114>
 3dc:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <i.2114+0x1>
 3e0:	48 e2       	ldi	r20, 0x28	; 40
 3e2:	42 9f       	mul	r20, r18
 3e4:	f0 01       	movw	r30, r0
 3e6:	43 9f       	mul	r20, r19
 3e8:	f0 0d       	add	r31, r0
 3ea:	11 24       	eor	r1, r1
 3ec:	ea 5e       	subi	r30, 0xEA	; 234
 3ee:	fd 4f       	sbci	r31, 0xFD	; 253
 3f0:	e8 0f       	add	r30, r24
 3f2:	f9 1f       	adc	r31, r25
 3f4:	10 82       	st	Z, r1
		i = 0; // i를 초기화 : 다음 문장을 입력받을 준비
 3f6:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <i.2114+0x1>
 3fa:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <i.2114>
		rear++;
 3fe:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <rear>
 402:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <rear+0x1>
 406:	01 96       	adiw	r24, 0x01	; 1
 408:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <rear+0x1>
 40c:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <rear>
		rear %= 20;
 410:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <rear>
 414:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <rear+0x1>
 418:	64 e1       	ldi	r22, 0x14	; 20
 41a:	70 e0       	ldi	r23, 0x00	; 0
 41c:	f7 d1       	rcall	.+1006   	; 0x80c <__divmodhi4>
 41e:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <rear+0x1>
 422:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <rear>
 426:	1b c0       	rjmp	.+54     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	}else{
		rx_Quebuff[rear][i++] = data;
 428:	60 91 aa 01 	lds	r22, 0x01AA	; 0x8001aa <rear>
 42c:	70 91 ab 01 	lds	r23, 0x01AB	; 0x8001ab <rear+0x1>
 430:	20 91 a6 01 	lds	r18, 0x01A6	; 0x8001a6 <i.2114>
 434:	30 91 a7 01 	lds	r19, 0x01A7	; 0x8001a7 <i.2114+0x1>
 438:	a9 01       	movw	r20, r18
 43a:	4f 5f       	subi	r20, 0xFF	; 255
 43c:	5f 4f       	sbci	r21, 0xFF	; 255
 43e:	50 93 a7 01 	sts	0x01A7, r21	; 0x8001a7 <i.2114+0x1>
 442:	40 93 a6 01 	sts	0x01A6, r20	; 0x8001a6 <i.2114>
 446:	98 e2       	ldi	r25, 0x28	; 40
 448:	96 9f       	mul	r25, r22
 44a:	a0 01       	movw	r20, r0
 44c:	97 9f       	mul	r25, r23
 44e:	50 0d       	add	r21, r0
 450:	11 24       	eor	r1, r1
 452:	4a 5e       	subi	r20, 0xEA	; 234
 454:	5d 4f       	sbci	r21, 0xFD	; 253
 456:	fa 01       	movw	r30, r20
 458:	e2 0f       	add	r30, r18
 45a:	f3 1f       	adc	r31, r19
 45c:	80 83       	st	Z, r24
	}
}
 45e:	ff 91       	pop	r31
 460:	ef 91       	pop	r30
 462:	bf 91       	pop	r27
 464:	af 91       	pop	r26
 466:	9f 91       	pop	r25
 468:	8f 91       	pop	r24
 46a:	7f 91       	pop	r23
 46c:	6f 91       	pop	r22
 46e:	5f 91       	pop	r21
 470:	4f 91       	pop	r20
 472:	3f 91       	pop	r19
 474:	2f 91       	pop	r18
 476:	0f 90       	pop	r0
 478:	0b be       	out	0x3b, r0	; 59
 47a:	0f 90       	pop	r0
 47c:	0f be       	out	0x3f, r0	; 63
 47e:	0f 90       	pop	r0
 480:	1f 90       	pop	r1
 482:	18 95       	reti

00000484 <init_uart0>:

void init_uart0(void){
	// 표 9-9(p.219)
	UBRR0H = 0x00;
 484:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207; //9600bps설정하는것임 
 488:	8f ec       	ldi	r24, 0xCF	; 207
 48a:	89 b9       	out	0x09, r24	; 9
	//data는 8bit고 non parity설정을하자 : UCSRnA레지스터
	
	UCSR0A |= 1 << U2X0; //2배속 통신
 48c:	8b b1       	in	r24, 0x0b	; 11
 48e:	82 60       	ori	r24, 0x02	; 2
 490:	8b b9       	out	0x0b, r24	; 11
	UCSR0C |= 0x06; // ASYNC(비동기) / data8bit / none parity
 492:	e5 e9       	ldi	r30, 0x95	; 149
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	80 81       	ld	r24, Z
 498:	86 60       	ori	r24, 0x06	; 6
 49a:	80 83       	st	Z, r24
	
	// RXEN0 : UART0로 부터 수신이 가능하도록 설정
	// TXEN0 : UART0로 부터 송신이 가능하도록 설정
	// RXCIEN0 : UART0로 부터 1byte가 들어오면(stopbit까지 수신완료된 상황)이면, rx 인터럽트를 발생시킨다.
	UCSR0B |= 1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0;
 49c:	8a b1       	in	r24, 0x0a	; 10
 49e:	88 69       	ori	r24, 0x98	; 152
 4a0:	8a b9       	out	0x0a, r24	; 10
 4a2:	08 95       	ret

000004a4 <UART0_transmit>:
}


//UART0를 1byte를 전송하는 함수
void UART0_transmit(uint8_t data){
	while(!(UCSR0A & 1 << UDRE0));
 4a4:	5d 9b       	sbis	0x0b, 5	; 11
 4a6:	fe cf       	rjmp	.-4      	; 0x4a4 <UART0_transmit>
		// 우선순위가 << : 5, & : 8
		//UDRE0는 5비트위치
		//데이터가 전송중이면 전송이 끝날때 까지 기다린다.
		// no operation : NOP
		UDR0 = data; 
 4a8:	8c b9       	out	0x0c, r24	; 12
 4aa:	08 95       	ret

000004ac <pc_command_processing>:
}

// UART ISR에서, rx_ready_flag = 1;된후
// command parsing작업 필요
void pc_command_processing()
{
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
	char* cmd;
	if( front != rear){
 4b0:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <front>
 4b4:	30 91 a9 01 	lds	r19, 0x01A9	; 0x8001a9 <front+0x1>
 4b8:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <rear>
 4bc:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <rear+0x1>
 4c0:	28 17       	cp	r18, r24
 4c2:	39 07       	cpc	r19, r25
 4c4:	09 f4       	brne	.+2      	; 0x4c8 <pc_command_processing+0x1c>
 4c6:	83 c0       	rjmp	.+262    	; 0x5ce <pc_command_processing+0x122>
		cmd = rx_Quebuff[front];
 4c8:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <front>
 4cc:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <front+0x1>
 4d0:	28 e2       	ldi	r18, 0x28	; 40
 4d2:	28 9f       	mul	r18, r24
 4d4:	e0 01       	movw	r28, r0
 4d6:	29 9f       	mul	r18, r25
 4d8:	d0 0d       	add	r29, r0
 4da:	11 24       	eor	r1, r1
 4dc:	ca 5e       	subi	r28, 0xEA	; 234
 4de:	dd 4f       	sbci	r29, 0xFD	; 253
		printf("%s\n",cmd);
 4e0:	ce 01       	movw	r24, r28
 4e2:	c9 d1       	rcall	.+914    	; 0x876 <puts>
		front = (front+1) % 20;	
 4e4:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <front>
 4e8:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <front+0x1>
 4ec:	01 96       	adiw	r24, 0x01	; 1
 4ee:	64 e1       	ldi	r22, 0x14	; 20
 4f0:	70 e0       	ldi	r23, 0x00	; 0
 4f2:	8c d1       	rcall	.+792    	; 0x80c <__divmodhi4>
 4f4:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <front+0x1>
 4f8:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <front>
		if(strncmp(cmd,"led_all_on",strlen("led_all_on")) == 0){
 4fc:	4a e0       	ldi	r20, 0x0A	; 10
 4fe:	50 e0       	ldi	r21, 0x00	; 0
 500:	6e e1       	ldi	r22, 0x1E	; 30
 502:	71 e0       	ldi	r23, 0x01	; 1
 504:	ce 01       	movw	r24, r28
 506:	a9 d1       	rcall	.+850    	; 0x85a <strncmp>
 508:	89 2b       	or	r24, r25
 50a:	49 f4       	brne	.+18     	; 0x51e <pc_command_processing+0x72>
			LED_PORT = 0xff;
 50c:	8f ef       	ldi	r24, 0xFF	; 255
 50e:	8b bb       	out	0x1b, r24	; 27
			job = 5;
 510:	85 e0       	ldi	r24, 0x05	; 5
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 518:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 51c:	58 c0       	rjmp	.+176    	; 0x5ce <pc_command_processing+0x122>
		}else if(strncmp(cmd,"led_all_off",strlen("led_all_off")) == 0){
 51e:	4b e0       	ldi	r20, 0x0B	; 11
 520:	50 e0       	ldi	r21, 0x00	; 0
 522:	69 e2       	ldi	r22, 0x29	; 41
 524:	71 e0       	ldi	r23, 0x01	; 1
 526:	ce 01       	movw	r24, r28
 528:	98 d1       	rcall	.+816    	; 0x85a <strncmp>
 52a:	89 2b       	or	r24, r25
 52c:	41 f4       	brne	.+16     	; 0x53e <pc_command_processing+0x92>
			LED_PORT = 0x00;
 52e:	1b ba       	out	0x1b, r1	; 27
			job = 5;
 530:	85 e0       	ldi	r24, 0x05	; 5
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 538:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 53c:	48 c0       	rjmp	.+144    	; 0x5ce <pc_command_processing+0x122>
		}else if(strncmp(cmd,"led_all_on_off",strlen("led_all_on_off"))==0){
 53e:	4e e0       	ldi	r20, 0x0E	; 14
 540:	50 e0       	ldi	r21, 0x00	; 0
 542:	65 e3       	ldi	r22, 0x35	; 53
 544:	71 e0       	ldi	r23, 0x01	; 1
 546:	ce 01       	movw	r24, r28
 548:	88 d1       	rcall	.+784    	; 0x85a <strncmp>
 54a:	89 2b       	or	r24, r25
 54c:	39 f4       	brne	.+14     	; 0x55c <pc_command_processing+0xb0>
			job = 4;
 54e:	84 e0       	ldi	r24, 0x04	; 4
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 556:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 55a:	39 c0       	rjmp	.+114    	; 0x5ce <pc_command_processing+0x122>
		}else if(strncmp(cmd,"shift_left22right_keep_ledon",strlen("shift_left22right_keep_ledon")) == 0){
 55c:	4c e1       	ldi	r20, 0x1C	; 28
 55e:	50 e0       	ldi	r21, 0x00	; 0
 560:	64 e4       	ldi	r22, 0x44	; 68
 562:	71 e0       	ldi	r23, 0x01	; 1
 564:	ce 01       	movw	r24, r28
 566:	79 d1       	rcall	.+754    	; 0x85a <strncmp>
 568:	89 2b       	or	r24, r25
 56a:	29 f4       	brne	.+10     	; 0x576 <pc_command_processing+0xca>
			job = 0;
 56c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 570:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}else if(strncmp(cmd,"shift_right22left_keep_ledon",strlen("shift_right22left_keep_ledon")) == 0){
 574:	2c c0       	rjmp	.+88     	; 0x5ce <pc_command_processing+0x122>
 576:	4c e1       	ldi	r20, 0x1C	; 28
 578:	50 e0       	ldi	r21, 0x00	; 0
 57a:	61 e6       	ldi	r22, 0x61	; 97
 57c:	71 e0       	ldi	r23, 0x01	; 1
 57e:	ce 01       	movw	r24, r28
 580:	6c d1       	rcall	.+728    	; 0x85a <strncmp>
 582:	89 2b       	or	r24, r25
 584:	39 f4       	brne	.+14     	; 0x594 <pc_command_processing+0xe8>
			job = 1;
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 58e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}else if(strncmp(cmd,"flower_on2",strlen("flower_on2"))==0){
 592:	1d c0       	rjmp	.+58     	; 0x5ce <pc_command_processing+0x122>
 594:	4a e0       	ldi	r20, 0x0A	; 10
 596:	50 e0       	ldi	r21, 0x00	; 0
 598:	6e e7       	ldi	r22, 0x7E	; 126
 59a:	71 e0       	ldi	r23, 0x01	; 1
 59c:	ce 01       	movw	r24, r28
 59e:	5d d1       	rcall	.+698    	; 0x85a <strncmp>
 5a0:	89 2b       	or	r24, r25
 5a2:	39 f4       	brne	.+14     	; 0x5b2 <pc_command_processing+0x106>
			job = 2;
 5a4:	82 e0       	ldi	r24, 0x02	; 2
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 5ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}else if(strncmp(cmd,"flower_off2",strlen("flower_off2"))==0){
 5b0:	0e c0       	rjmp	.+28     	; 0x5ce <pc_command_processing+0x122>
 5b2:	4b e0       	ldi	r20, 0x0B	; 11
 5b4:	50 e0       	ldi	r21, 0x00	; 0
 5b6:	69 e8       	ldi	r22, 0x89	; 137
 5b8:	71 e0       	ldi	r23, 0x01	; 1
 5ba:	ce 01       	movw	r24, r28
 5bc:	4e d1       	rcall	.+668    	; 0x85a <strncmp>
 5be:	89 2b       	or	r24, r25
 5c0:	31 f4       	brne	.+12     	; 0x5ce <pc_command_processing+0x122>
			job = 3;
 5c2:	83 e0       	ldi	r24, 0x03	; 3
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 5ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	}
 5ce:	df 91       	pop	r29
 5d0:	cf 91       	pop	r28
 5d2:	08 95       	ret

000005d4 <__vector_30>:
	while(!(UCSR1A & 1 << UDRE1));
	// 우선순위가 << : 5, & : 8
	//UDRE0는 5비트위치
	//데이터가 전송중이면 전송이 끝날때 까지 기다린다.
	// no operation : NOP
	UDR1 = data;
 5d4:	1f 92       	push	r1
 5d6:	0f 92       	push	r0
 5d8:	0f b6       	in	r0, 0x3f	; 63
 5da:	0f 92       	push	r0
 5dc:	11 24       	eor	r1, r1
 5de:	0b b6       	in	r0, 0x3b	; 59
 5e0:	0f 92       	push	r0
 5e2:	2f 93       	push	r18
 5e4:	3f 93       	push	r19
 5e6:	4f 93       	push	r20
 5e8:	5f 93       	push	r21
 5ea:	6f 93       	push	r22
 5ec:	7f 93       	push	r23
 5ee:	8f 93       	push	r24
 5f0:	9f 93       	push	r25
 5f2:	af 93       	push	r26
 5f4:	bf 93       	push	r27
 5f6:	ef 93       	push	r30
 5f8:	ff 93       	push	r31
 5fa:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 5fe:	8d 30       	cpi	r24, 0x0D	; 13
 600:	11 f0       	breq	.+4      	; 0x606 <__vector_30+0x32>
 602:	8a 30       	cpi	r24, 0x0A	; 10
 604:	61 f5       	brne	.+88     	; 0x65e <__vector_30+0x8a>
 606:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <rear1>
 60a:	30 91 b1 01 	lds	r19, 0x01B1	; 0x8001b1 <rear1+0x1>
 60e:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <i.2114>
 612:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <i.2114+0x1>
 616:	48 e2       	ldi	r20, 0x28	; 40
 618:	42 9f       	mul	r20, r18
 61a:	f0 01       	movw	r30, r0
 61c:	43 9f       	mul	r20, r19
 61e:	f0 0d       	add	r31, r0
 620:	11 24       	eor	r1, r1
 622:	ea 5c       	subi	r30, 0xCA	; 202
 624:	fa 4f       	sbci	r31, 0xFA	; 250
 626:	e8 0f       	add	r30, r24
 628:	f9 1f       	adc	r31, r25
 62a:	10 82       	st	Z, r1
 62c:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <i.2114+0x1>
 630:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <i.2114>
 634:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <rear1>
 638:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <rear1+0x1>
 63c:	01 96       	adiw	r24, 0x01	; 1
 63e:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <rear1+0x1>
 642:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <rear1>
 646:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <rear1>
 64a:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <rear1+0x1>
 64e:	64 e1       	ldi	r22, 0x14	; 20
 650:	70 e0       	ldi	r23, 0x00	; 0
 652:	dc d0       	rcall	.+440    	; 0x80c <__divmodhi4>
 654:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <rear1+0x1>
 658:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <rear1>
 65c:	1b c0       	rjmp	.+54     	; 0x694 <__vector_30+0xc0>
 65e:	60 91 b0 01 	lds	r22, 0x01B0	; 0x8001b0 <rear1>
 662:	70 91 b1 01 	lds	r23, 0x01B1	; 0x8001b1 <rear1+0x1>
 666:	20 91 ac 01 	lds	r18, 0x01AC	; 0x8001ac <i.2114>
 66a:	30 91 ad 01 	lds	r19, 0x01AD	; 0x8001ad <i.2114+0x1>
 66e:	a9 01       	movw	r20, r18
 670:	4f 5f       	subi	r20, 0xFF	; 255
 672:	5f 4f       	sbci	r21, 0xFF	; 255
 674:	50 93 ad 01 	sts	0x01AD, r21	; 0x8001ad <i.2114+0x1>
 678:	40 93 ac 01 	sts	0x01AC, r20	; 0x8001ac <i.2114>
 67c:	98 e2       	ldi	r25, 0x28	; 40
 67e:	96 9f       	mul	r25, r22
 680:	a0 01       	movw	r20, r0
 682:	97 9f       	mul	r25, r23
 684:	50 0d       	add	r21, r0
 686:	11 24       	eor	r1, r1
 688:	4a 5c       	subi	r20, 0xCA	; 202
 68a:	5a 4f       	sbci	r21, 0xFA	; 250
 68c:	fa 01       	movw	r30, r20
 68e:	e2 0f       	add	r30, r18
 690:	f3 1f       	adc	r31, r19
 692:	80 83       	st	Z, r24
 694:	ff 91       	pop	r31
 696:	ef 91       	pop	r30
 698:	bf 91       	pop	r27
 69a:	af 91       	pop	r26
 69c:	9f 91       	pop	r25
 69e:	8f 91       	pop	r24
 6a0:	7f 91       	pop	r23
 6a2:	6f 91       	pop	r22
 6a4:	5f 91       	pop	r21
 6a6:	4f 91       	pop	r20
 6a8:	3f 91       	pop	r19
 6aa:	2f 91       	pop	r18
 6ac:	0f 90       	pop	r0
 6ae:	0b be       	out	0x3b, r0	; 59
 6b0:	0f 90       	pop	r0
 6b2:	0f be       	out	0x3f, r0	; 63
 6b4:	0f 90       	pop	r0
 6b6:	1f 90       	pop	r1
 6b8:	18 95       	reti

000006ba <init_uart1>:
 6ba:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 6be:	8f ec       	ldi	r24, 0xCF	; 207
 6c0:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 6c4:	eb e9       	ldi	r30, 0x9B	; 155
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	80 81       	ld	r24, Z
 6ca:	82 60       	ori	r24, 0x02	; 2
 6cc:	80 83       	st	Z, r24
 6ce:	ed e9       	ldi	r30, 0x9D	; 157
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	80 81       	ld	r24, Z
 6d4:	86 60       	ori	r24, 0x06	; 6
 6d6:	80 83       	st	Z, r24
 6d8:	ea e9       	ldi	r30, 0x9A	; 154
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	80 81       	ld	r24, Z
 6de:	88 69       	ori	r24, 0x98	; 152
 6e0:	80 83       	st	Z, r24
 6e2:	08 95       	ret

000006e4 <bit_command_processing>:
}

// UART ISR에서, rx_ready_flag = 1;된후
// command parsing작업 필요
void bit_command_processing()
{
 6e4:	cf 93       	push	r28
 6e6:	df 93       	push	r29
	char* cmd;
	if( front1 != rear1){
 6e8:	20 91 ae 01 	lds	r18, 0x01AE	; 0x8001ae <front1>
 6ec:	30 91 af 01 	lds	r19, 0x01AF	; 0x8001af <front1+0x1>
 6f0:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <rear1>
 6f4:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <rear1+0x1>
 6f8:	28 17       	cp	r18, r24
 6fa:	39 07       	cpc	r19, r25
 6fc:	09 f4       	brne	.+2      	; 0x700 <bit_command_processing+0x1c>
 6fe:	83 c0       	rjmp	.+262    	; 0x806 <bit_command_processing+0x122>
		cmd = rx1_Quebuff[front1];
 700:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <front1>
 704:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <front1+0x1>
 708:	28 e2       	ldi	r18, 0x28	; 40
 70a:	28 9f       	mul	r18, r24
 70c:	e0 01       	movw	r28, r0
 70e:	29 9f       	mul	r18, r25
 710:	d0 0d       	add	r29, r0
 712:	11 24       	eor	r1, r1
 714:	ca 5c       	subi	r28, 0xCA	; 202
 716:	da 4f       	sbci	r29, 0xFA	; 250
		printf("%s\n",cmd);
 718:	ce 01       	movw	r24, r28
 71a:	ad d0       	rcall	.+346    	; 0x876 <puts>
		front1 = (front1+1) % 20;
 71c:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <front1>
 720:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <front1+0x1>
 724:	01 96       	adiw	r24, 0x01	; 1
 726:	64 e1       	ldi	r22, 0x14	; 20
 728:	70 e0       	ldi	r23, 0x00	; 0
 72a:	70 d0       	rcall	.+224    	; 0x80c <__divmodhi4>
 72c:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <front1+0x1>
 730:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <front1>
		if(strncmp(cmd,"led_all_on",strlen("led_all_on")) == 0){
 734:	4a e0       	ldi	r20, 0x0A	; 10
 736:	50 e0       	ldi	r21, 0x00	; 0
 738:	6e e1       	ldi	r22, 0x1E	; 30
 73a:	71 e0       	ldi	r23, 0x01	; 1
 73c:	ce 01       	movw	r24, r28
 73e:	8d d0       	rcall	.+282    	; 0x85a <strncmp>
 740:	89 2b       	or	r24, r25
 742:	49 f4       	brne	.+18     	; 0x756 <bit_command_processing+0x72>
			LED_PORT = 0xff;
 744:	8f ef       	ldi	r24, 0xFF	; 255
 746:	8b bb       	out	0x1b, r24	; 27
			job = 5;
 748:	85 e0       	ldi	r24, 0x05	; 5
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 750:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 754:	58 c0       	rjmp	.+176    	; 0x806 <bit_command_processing+0x122>
			}else if(strncmp(cmd,"led_all_off",strlen("led_all_off")) == 0){
 756:	4b e0       	ldi	r20, 0x0B	; 11
 758:	50 e0       	ldi	r21, 0x00	; 0
 75a:	69 e2       	ldi	r22, 0x29	; 41
 75c:	71 e0       	ldi	r23, 0x01	; 1
 75e:	ce 01       	movw	r24, r28
 760:	7c d0       	rcall	.+248    	; 0x85a <strncmp>
 762:	89 2b       	or	r24, r25
 764:	41 f4       	brne	.+16     	; 0x776 <bit_command_processing+0x92>
			LED_PORT = 0x00;
 766:	1b ba       	out	0x1b, r1	; 27
			job = 5;
 768:	85 e0       	ldi	r24, 0x05	; 5
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 770:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 774:	48 c0       	rjmp	.+144    	; 0x806 <bit_command_processing+0x122>
			}else if(strncmp(cmd,"led_all_on_off",strlen("led_all_on_off"))==0){
 776:	4e e0       	ldi	r20, 0x0E	; 14
 778:	50 e0       	ldi	r21, 0x00	; 0
 77a:	65 e3       	ldi	r22, 0x35	; 53
 77c:	71 e0       	ldi	r23, 0x01	; 1
 77e:	ce 01       	movw	r24, r28
 780:	6c d0       	rcall	.+216    	; 0x85a <strncmp>
 782:	89 2b       	or	r24, r25
 784:	39 f4       	brne	.+14     	; 0x794 <bit_command_processing+0xb0>
			job = 4;
 786:	84 e0       	ldi	r24, 0x04	; 4
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 78e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 792:	39 c0       	rjmp	.+114    	; 0x806 <bit_command_processing+0x122>
			}else if(strncmp(cmd,"shift_left22right_keep_ledon",strlen("shift_left22right_keep_ledon")) == 0){
 794:	4c e1       	ldi	r20, 0x1C	; 28
 796:	50 e0       	ldi	r21, 0x00	; 0
 798:	64 e4       	ldi	r22, 0x44	; 68
 79a:	71 e0       	ldi	r23, 0x01	; 1
 79c:	ce 01       	movw	r24, r28
 79e:	5d d0       	rcall	.+186    	; 0x85a <strncmp>
 7a0:	89 2b       	or	r24, r25
 7a2:	29 f4       	brne	.+10     	; 0x7ae <bit_command_processing+0xca>
			job = 0;
 7a4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 7a8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			}else if(strncmp(cmd,"shift_right22left_keep_ledon",strlen("shift_right22left_keep_ledon")) == 0){
 7ac:	2c c0       	rjmp	.+88     	; 0x806 <bit_command_processing+0x122>
 7ae:	4c e1       	ldi	r20, 0x1C	; 28
 7b0:	50 e0       	ldi	r21, 0x00	; 0
 7b2:	61 e6       	ldi	r22, 0x61	; 97
 7b4:	71 e0       	ldi	r23, 0x01	; 1
 7b6:	ce 01       	movw	r24, r28
 7b8:	50 d0       	rcall	.+160    	; 0x85a <strncmp>
 7ba:	89 2b       	or	r24, r25
 7bc:	39 f4       	brne	.+14     	; 0x7cc <bit_command_processing+0xe8>
			job = 1;
 7be:	81 e0       	ldi	r24, 0x01	; 1
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 7c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			}else if(strncmp(cmd,"flower_on2",strlen("flower_on2"))==0){
 7ca:	1d c0       	rjmp	.+58     	; 0x806 <bit_command_processing+0x122>
 7cc:	4a e0       	ldi	r20, 0x0A	; 10
 7ce:	50 e0       	ldi	r21, 0x00	; 0
 7d0:	6e e7       	ldi	r22, 0x7E	; 126
 7d2:	71 e0       	ldi	r23, 0x01	; 1
 7d4:	ce 01       	movw	r24, r28
 7d6:	41 d0       	rcall	.+130    	; 0x85a <strncmp>
 7d8:	89 2b       	or	r24, r25
 7da:	39 f4       	brne	.+14     	; 0x7ea <bit_command_processing+0x106>
			job = 2;
 7dc:	82 e0       	ldi	r24, 0x02	; 2
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 7e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			}else if(strncmp(cmd,"flower_off2",strlen("flower_off2"))==0){
 7e8:	0e c0       	rjmp	.+28     	; 0x806 <bit_command_processing+0x122>
 7ea:	4b e0       	ldi	r20, 0x0B	; 11
 7ec:	50 e0       	ldi	r21, 0x00	; 0
 7ee:	69 e8       	ldi	r22, 0x89	; 137
 7f0:	71 e0       	ldi	r23, 0x01	; 1
 7f2:	ce 01       	movw	r24, r28
 7f4:	32 d0       	rcall	.+100    	; 0x85a <strncmp>
 7f6:	89 2b       	or	r24, r25
 7f8:	31 f4       	brne	.+12     	; 0x806 <bit_command_processing+0x122>
			job = 3;
 7fa:	83 e0       	ldi	r24, 0x03	; 3
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 802:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	}
 806:	df 91       	pop	r29
 808:	cf 91       	pop	r28
 80a:	08 95       	ret

0000080c <__divmodhi4>:
 80c:	97 fb       	bst	r25, 7
 80e:	07 2e       	mov	r0, r23
 810:	16 f4       	brtc	.+4      	; 0x816 <__divmodhi4+0xa>
 812:	00 94       	com	r0
 814:	06 d0       	rcall	.+12     	; 0x822 <__divmodhi4_neg1>
 816:	77 fd       	sbrc	r23, 7
 818:	08 d0       	rcall	.+16     	; 0x82a <__divmodhi4_neg2>
 81a:	0b d0       	rcall	.+22     	; 0x832 <__udivmodhi4>
 81c:	07 fc       	sbrc	r0, 7
 81e:	05 d0       	rcall	.+10     	; 0x82a <__divmodhi4_neg2>
 820:	3e f4       	brtc	.+14     	; 0x830 <__divmodhi4_exit>

00000822 <__divmodhi4_neg1>:
 822:	90 95       	com	r25
 824:	81 95       	neg	r24
 826:	9f 4f       	sbci	r25, 0xFF	; 255
 828:	08 95       	ret

0000082a <__divmodhi4_neg2>:
 82a:	70 95       	com	r23
 82c:	61 95       	neg	r22
 82e:	7f 4f       	sbci	r23, 0xFF	; 255

00000830 <__divmodhi4_exit>:
 830:	08 95       	ret

00000832 <__udivmodhi4>:
 832:	aa 1b       	sub	r26, r26
 834:	bb 1b       	sub	r27, r27
 836:	51 e1       	ldi	r21, 0x11	; 17
 838:	07 c0       	rjmp	.+14     	; 0x848 <__udivmodhi4_ep>

0000083a <__udivmodhi4_loop>:
 83a:	aa 1f       	adc	r26, r26
 83c:	bb 1f       	adc	r27, r27
 83e:	a6 17       	cp	r26, r22
 840:	b7 07       	cpc	r27, r23
 842:	10 f0       	brcs	.+4      	; 0x848 <__udivmodhi4_ep>
 844:	a6 1b       	sub	r26, r22
 846:	b7 0b       	sbc	r27, r23

00000848 <__udivmodhi4_ep>:
 848:	88 1f       	adc	r24, r24
 84a:	99 1f       	adc	r25, r25
 84c:	5a 95       	dec	r21
 84e:	a9 f7       	brne	.-22     	; 0x83a <__udivmodhi4_loop>
 850:	80 95       	com	r24
 852:	90 95       	com	r25
 854:	bc 01       	movw	r22, r24
 856:	cd 01       	movw	r24, r26
 858:	08 95       	ret

0000085a <strncmp>:
 85a:	fb 01       	movw	r30, r22
 85c:	dc 01       	movw	r26, r24
 85e:	41 50       	subi	r20, 0x01	; 1
 860:	50 40       	sbci	r21, 0x00	; 0
 862:	30 f0       	brcs	.+12     	; 0x870 <strncmp+0x16>
 864:	8d 91       	ld	r24, X+
 866:	01 90       	ld	r0, Z+
 868:	80 19       	sub	r24, r0
 86a:	19 f4       	brne	.+6      	; 0x872 <strncmp+0x18>
 86c:	00 20       	and	r0, r0
 86e:	b9 f7       	brne	.-18     	; 0x85e <strncmp+0x4>
 870:	88 1b       	sub	r24, r24
 872:	99 0b       	sbc	r25, r25
 874:	08 95       	ret

00000876 <puts>:
 876:	0f 93       	push	r16
 878:	1f 93       	push	r17
 87a:	cf 93       	push	r28
 87c:	df 93       	push	r29
 87e:	e0 91 bc 08 	lds	r30, 0x08BC	; 0x8008bc <__iob+0x2>
 882:	f0 91 bd 08 	lds	r31, 0x08BD	; 0x8008bd <__iob+0x3>
 886:	23 81       	ldd	r18, Z+3	; 0x03
 888:	21 ff       	sbrs	r18, 1
 88a:	1b c0       	rjmp	.+54     	; 0x8c2 <puts+0x4c>
 88c:	8c 01       	movw	r16, r24
 88e:	d0 e0       	ldi	r29, 0x00	; 0
 890:	c0 e0       	ldi	r28, 0x00	; 0
 892:	f8 01       	movw	r30, r16
 894:	81 91       	ld	r24, Z+
 896:	8f 01       	movw	r16, r30
 898:	60 91 bc 08 	lds	r22, 0x08BC	; 0x8008bc <__iob+0x2>
 89c:	70 91 bd 08 	lds	r23, 0x08BD	; 0x8008bd <__iob+0x3>
 8a0:	db 01       	movw	r26, r22
 8a2:	18 96       	adiw	r26, 0x08	; 8
 8a4:	ed 91       	ld	r30, X+
 8a6:	fc 91       	ld	r31, X
 8a8:	19 97       	sbiw	r26, 0x09	; 9
 8aa:	88 23       	and	r24, r24
 8ac:	31 f0       	breq	.+12     	; 0x8ba <puts+0x44>
 8ae:	09 95       	icall
 8b0:	89 2b       	or	r24, r25
 8b2:	79 f3       	breq	.-34     	; 0x892 <puts+0x1c>
 8b4:	df ef       	ldi	r29, 0xFF	; 255
 8b6:	cf ef       	ldi	r28, 0xFF	; 255
 8b8:	ec cf       	rjmp	.-40     	; 0x892 <puts+0x1c>
 8ba:	8a e0       	ldi	r24, 0x0A	; 10
 8bc:	09 95       	icall
 8be:	89 2b       	or	r24, r25
 8c0:	19 f0       	breq	.+6      	; 0x8c8 <puts+0x52>
 8c2:	8f ef       	ldi	r24, 0xFF	; 255
 8c4:	9f ef       	ldi	r25, 0xFF	; 255
 8c6:	02 c0       	rjmp	.+4      	; 0x8cc <puts+0x56>
 8c8:	8d 2f       	mov	r24, r29
 8ca:	9c 2f       	mov	r25, r28
 8cc:	df 91       	pop	r29
 8ce:	cf 91       	pop	r28
 8d0:	1f 91       	pop	r17
 8d2:	0f 91       	pop	r16
 8d4:	08 95       	ret

000008d6 <_exit>:
 8d6:	f8 94       	cli

000008d8 <__stop_program>:
 8d8:	ff cf       	rjmp	.-2      	; 0x8d8 <__stop_program>
