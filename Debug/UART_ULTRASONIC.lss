
UART_ULTRASONIC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  000014b4  00001548  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006fe  008001a2  008001a2  000015ea  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000015ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001648  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001675  00000000  00000000  000017d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dfe  00000000  00000000  00002e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c21  00000000  00000000  00003c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000035c  00000000  00000000  0000486c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e0  00000000  00000000  00004bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000602  00000000  00000000  000052a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000058aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	1b c4       	rjmp	.+2102   	; 0x84c <__vector_5>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	78 c1       	rjmp	.+752    	; 0x332 <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	c1 c1       	rjmp	.+898    	; 0x3cc <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	cf c2       	rjmp	.+1438   	; 0x618 <__vector_30>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 eb       	ldi	r30, 0xB4	; 180
      a0:	f4 e1       	ldi	r31, 0x14	; 20
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 3a       	cpi	r26, 0xA2	; 162
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	28 e0       	ldi	r18, 0x08	; 8
      b4:	a2 ea       	ldi	r26, 0xA2	; 162
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a0 3a       	cpi	r26, 0xA0	; 160
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	fe d0       	rcall	.+508    	; 0x2c0 <main>
      c4:	0c 94 58 0a 	jmp	0x14b0	; 0x14b0 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <led_all_on_off>:
			i = 0;
			//PORTA = 0x00;
			*pjob = FLOWER_OFF;
		}else{
			PORTA |= bit_value<<i | bit_value>>i+1;
			i += 1;
      ca:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <ms_count>
      ce:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <ms_count+0x1>
      d2:	a0 91 b4 01 	lds	r26, 0x01B4	; 0x8001b4 <ms_count+0x2>
      d6:	b0 91 b5 01 	lds	r27, 0x01B5	; 0x8001b5 <ms_count+0x3>
      da:	88 3e       	cpi	r24, 0xE8	; 232
      dc:	93 40       	sbci	r25, 0x03	; 3
      de:	a1 05       	cpc	r26, r1
      e0:	b1 05       	cpc	r27, r1
      e2:	50 f0       	brcs	.+20     	; 0xf8 <led_all_on_off+0x2e>
      e4:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <ms_count>
      e8:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <ms_count+0x1>
      ec:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <ms_count+0x2>
      f0:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <ms_count+0x3>
      f4:	8f ef       	ldi	r24, 0xFF	; 255
      f6:	8b bb       	out	0x1b, r24	; 27
      f8:	08 95       	ret

000000fa <shift_left22right_keep_ledon>:
      fa:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <shift_timer>
      fe:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <shift_timer+0x1>
     102:	a0 91 b0 01 	lds	r26, 0x01B0	; 0x8001b0 <shift_timer+0x2>
     106:	b0 91 b1 01 	lds	r27, 0x01B1	; 0x8001b1 <shift_timer+0x3>
     10a:	8c 32       	cpi	r24, 0x2C	; 44
     10c:	91 40       	sbci	r25, 0x01	; 1
     10e:	a1 05       	cpc	r26, r1
     110:	b1 05       	cpc	r27, r1
     112:	28 f1       	brcs	.+74     	; 0x15e <shift_left22right_keep_ledon+0x64>
     114:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <shift_timer>
     118:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <shift_timer+0x1>
     11c:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <shift_timer+0x2>
     120:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <shift_timer+0x3>
     124:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <i.2128>
     128:	30 91 a9 01 	lds	r19, 0x01A9	; 0x8001a9 <i.2128+0x1>
     12c:	28 30       	cpi	r18, 0x08	; 8
     12e:	31 05       	cpc	r19, r1
     130:	34 f0       	brlt	.+12     	; 0x13e <shift_left22right_keep_ledon+0x44>
     132:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <i.2128+0x1>
     136:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <i.2128>
     13a:	1b ba       	out	0x1b, r1	; 27
     13c:	08 95       	ret
     13e:	c9 01       	movw	r24, r18
     140:	01 96       	adiw	r24, 0x01	; 1
     142:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <i.2128+0x1>
     146:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <i.2128>
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	02 c0       	rjmp	.+4      	; 0x154 <shift_left22right_keep_ledon+0x5a>
     150:	88 0f       	add	r24, r24
     152:	99 1f       	adc	r25, r25
     154:	2a 95       	dec	r18
     156:	e2 f7       	brpl	.-8      	; 0x150 <shift_left22right_keep_ledon+0x56>
     158:	9b b3       	in	r25, 0x1b	; 27
     15a:	89 2b       	or	r24, r25
     15c:	8b bb       	out	0x1b, r24	; 27
     15e:	08 95       	ret

00000160 <shift_right22left_keep_ledon>:
     160:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <shift_timer>
     164:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <shift_timer+0x1>
     168:	a0 91 b0 01 	lds	r26, 0x01B0	; 0x8001b0 <shift_timer+0x2>
     16c:	b0 91 b1 01 	lds	r27, 0x01B1	; 0x8001b1 <shift_timer+0x3>
     170:	8c 32       	cpi	r24, 0x2C	; 44
     172:	91 40       	sbci	r25, 0x01	; 1
     174:	a1 05       	cpc	r26, r1
     176:	b1 05       	cpc	r27, r1
     178:	28 f1       	brcs	.+74     	; 0x1c4 <shift_right22left_keep_ledon+0x64>
     17a:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <shift_timer>
     17e:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <shift_timer+0x1>
     182:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <shift_timer+0x2>
     186:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <shift_timer+0x3>
     18a:	20 91 a6 01 	lds	r18, 0x01A6	; 0x8001a6 <i.2131>
     18e:	30 91 a7 01 	lds	r19, 0x01A7	; 0x8001a7 <i.2131+0x1>
     192:	28 30       	cpi	r18, 0x08	; 8
     194:	31 05       	cpc	r19, r1
     196:	34 f0       	brlt	.+12     	; 0x1a4 <shift_right22left_keep_ledon+0x44>
     198:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <i.2131+0x1>
     19c:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <i.2131>
     1a0:	1b ba       	out	0x1b, r1	; 27
     1a2:	08 95       	ret
     1a4:	c9 01       	movw	r24, r18
     1a6:	01 96       	adiw	r24, 0x01	; 1
     1a8:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <i.2131+0x1>
     1ac:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <i.2131>
     1b0:	80 e8       	ldi	r24, 0x80	; 128
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <shift_right22left_keep_ledon+0x5a>
     1b6:	95 95       	asr	r25
     1b8:	87 95       	ror	r24
     1ba:	2a 95       	dec	r18
     1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <shift_right22left_keep_ledon+0x56>
     1be:	9b b3       	in	r25, 0x1b	; 27
     1c0:	89 2b       	or	r24, r25
     1c2:	8b bb       	out	0x1b, r24	; 27
     1c4:	08 95       	ret

000001c6 <flower_on2>:

void flower_on2(){
	static uint8_t bit_value = 0b00010000; //값을 유지해야한다
	static int i =0;
	
	if(shift_timer >= 300){
     1c6:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <shift_timer>
     1ca:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <shift_timer+0x1>
     1ce:	a0 91 b0 01 	lds	r26, 0x01B0	; 0x8001b0 <shift_timer+0x2>
     1d2:	b0 91 b1 01 	lds	r27, 0x01B1	; 0x8001b1 <shift_timer+0x3>
     1d6:	8c 32       	cpi	r24, 0x2C	; 44
     1d8:	91 40       	sbci	r25, 0x01	; 1
     1da:	a1 05       	cpc	r26, r1
     1dc:	b1 05       	cpc	r27, r1
     1de:	88 f1       	brcs	.+98     	; 0x242 <flower_on2+0x7c>
		shift_timer = 0;
     1e0:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <shift_timer>
     1e4:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <shift_timer+0x1>
     1e8:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <shift_timer+0x2>
     1ec:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <shift_timer+0x3>
		if(i >= 4){
     1f0:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <i.2140>
     1f4:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <i.2140+0x1>
     1f8:	84 30       	cpi	r24, 0x04	; 4
     1fa:	91 05       	cpc	r25, r1
     1fc:	34 f0       	brlt	.+12     	; 0x20a <flower_on2+0x44>
			i = 0;
     1fe:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <i.2140+0x1>
     202:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <i.2140>
			PORTA = 0x00;
     206:	1b ba       	out	0x1b, r1	; 27
     208:	08 95       	ret
		}else{
			PORTA |= bit_value<<i | bit_value>>i+1;
     20a:	4b b3       	in	r20, 0x1b	; 27
     20c:	20 e1       	ldi	r18, 0x10	; 16
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	b9 01       	movw	r22, r18
     212:	08 2e       	mov	r0, r24
     214:	02 c0       	rjmp	.+4      	; 0x21a <flower_on2+0x54>
     216:	66 0f       	add	r22, r22
     218:	77 1f       	adc	r23, r23
     21a:	0a 94       	dec	r0
     21c:	e2 f7       	brpl	.-8      	; 0x216 <flower_on2+0x50>
     21e:	01 96       	adiw	r24, 0x01	; 1
     220:	02 c0       	rjmp	.+4      	; 0x226 <flower_on2+0x60>
     222:	35 95       	asr	r19
     224:	27 95       	ror	r18
     226:	8a 95       	dec	r24
     228:	e2 f7       	brpl	.-8      	; 0x222 <flower_on2+0x5c>
     22a:	26 2b       	or	r18, r22
     22c:	24 2b       	or	r18, r20
     22e:	2b bb       	out	0x1b, r18	; 27
			i += 1;
     230:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <i.2140>
     234:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <i.2140+0x1>
     238:	01 96       	adiw	r24, 0x01	; 1
     23a:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <i.2140+0x1>
     23e:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <i.2140>
     242:	08 95       	ret

00000244 <flower_off2>:

void flower_off2(){
	static uint8_t bit_value = 0b11111111;	 //값을 유지해야한다
	static int i =0;
	//PORTA = bit_value;
	if(shift_timer >= 600){
     244:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <shift_timer>
     248:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <shift_timer+0x1>
     24c:	a0 91 b0 01 	lds	r26, 0x01B0	; 0x8001b0 <shift_timer+0x2>
     250:	b0 91 b1 01 	lds	r27, 0x01B1	; 0x8001b1 <shift_timer+0x3>
     254:	88 35       	cpi	r24, 0x58	; 88
     256:	92 40       	sbci	r25, 0x02	; 2
     258:	a1 05       	cpc	r26, r1
     25a:	b1 05       	cpc	r27, r1
     25c:	80 f1       	brcs	.+96     	; 0x2be <flower_off2+0x7a>
		shift_timer = 0;
     25e:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <shift_timer>
     262:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <shift_timer+0x1>
     266:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <shift_timer+0x2>
     26a:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <shift_timer+0x3>
		if(i >= 4){
     26e:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <__data_end>
     272:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <__data_end+0x1>
     276:	24 30       	cpi	r18, 0x04	; 4
     278:	31 05       	cpc	r19, r1
     27a:	34 f0       	brlt	.+12     	; 0x288 <flower_off2+0x44>
			i = 0;
     27c:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <__data_end+0x1>
     280:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <__data_end>
			PORTA = 0x00;
     284:	1b ba       	out	0x1b, r1	; 27
     286:	08 95       	ret
			}else{
			PORTA &= bit_value>>i & bit_value<<i;
     288:	3b b3       	in	r19, 0x1b	; 27
     28a:	8f ef       	ldi	r24, 0xFF	; 255
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	ac 01       	movw	r20, r24
     290:	02 2e       	mov	r0, r18
     292:	02 c0       	rjmp	.+4      	; 0x298 <flower_off2+0x54>
     294:	55 95       	asr	r21
     296:	47 95       	ror	r20
     298:	0a 94       	dec	r0
     29a:	e2 f7       	brpl	.-8      	; 0x294 <flower_off2+0x50>
     29c:	02 c0       	rjmp	.+4      	; 0x2a2 <flower_off2+0x5e>
     29e:	88 0f       	add	r24, r24
     2a0:	99 1f       	adc	r25, r25
     2a2:	2a 95       	dec	r18
     2a4:	e2 f7       	brpl	.-8      	; 0x29e <flower_off2+0x5a>
     2a6:	84 23       	and	r24, r20
     2a8:	83 23       	and	r24, r19
     2aa:	8b bb       	out	0x1b, r24	; 27
			i += 1;
     2ac:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__data_end>
     2b0:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <__data_end+0x1>
     2b4:	01 96       	adiw	r24, 0x01	; 1
     2b6:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <__data_end+0x1>
     2ba:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <__data_end>
     2be:	08 95       	ret

000002c0 <main>:

int job = 5;

int main(void)
{
	init_timer0();
     2c0:	30 d0       	rcall	.+96     	; 0x322 <init_timer0>
	init_uart0();
     2c2:	02 d1       	rcall	.+516    	; 0x4c8 <init_uart0>
	init_uart1();
     2c4:	1c d2       	rcall	.+1080   	; 0x6fe <init_uart1>
     2c6:	82 e0       	ldi	r24, 0x02	; 2
	stdout = &OUTPUT; // 2. printf가 동작되도록 stdout에 OUTPUT파일 포인터를 assign한다.
     2c8:	91 e0       	ldi	r25, 0x01	; 1
     2ca:	90 93 9d 08 	sts	0x089D, r25	; 0x80089d <__iob+0x3>
     2ce:	80 93 9c 08 	sts	0x089C, r24	; 0x80089c <__iob+0x2>
	// fprintf(stdout,"test"); == printf("test\n");
	// scanf("%s",buff); --> stdin
	// fgets(input,100,stdin); //여기서 stdin이 가리키는 것은 키보드입니다.
	
	init_ultrasonic(); // sei전에 초음파관련 initialize
     2d2:	99 d3       	rcall	.+1842   	; 0xa06 <init_ultrasonic>
     2d4:	78 94       	sei
	sei(); // 전역적으로 인터럽트를 허용하겠다
     2d6:	8f ef       	ldi	r24, 0xFF	; 255
	
	//led A레지스터
	DDRA = 0xff; //출력모드 설정
     2d8:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00; // led all off
	
	/* UART통신, main의 while문 진입전 테스트*/
	printf("UART TEST!!!!\n");
     2da:	1b ba       	out	0x1b, r1	; 27
     2dc:	80 e1       	ldi	r24, 0x10	; 16

    while (1) 
    {
		// UART ISR에서, rx_ready_flag = 1;된후 
		// command parsing작업 필요
		pc_command_processing();
     2de:	91 e0       	ldi	r25, 0x01	; 1
     2e0:	dc d5       	rcall	.+3000   	; 0xe9a <puts>
		bit_command_processing();
     2e2:	06 d1       	rcall	.+524    	; 0x4f0 <pc_command_processing>
     2e4:	21 d2       	rcall	.+1090   	; 0x728 <bit_command_processing>
		ultrasonic_distance_check();
     2e6:	b7 d3       	rcall	.+1902   	; 0xa56 <ultrasonic_distance_check>
     2e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		switch(job)
     2ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2f0:	82 30       	cpi	r24, 0x02	; 2
     2f2:	91 05       	cpc	r25, r1
     2f4:	81 f0       	breq	.+32     	; 0x316 <main+0x56>
     2f6:	2c f4       	brge	.+10     	; 0x302 <main+0x42>
     2f8:	00 97       	sbiw	r24, 0x00	; 0
     2fa:	49 f0       	breq	.+18     	; 0x30e <main+0x4e>
     2fc:	01 97       	sbiw	r24, 0x01	; 1
     2fe:	49 f0       	breq	.+18     	; 0x312 <main+0x52>
     300:	f0 cf       	rjmp	.-32     	; 0x2e2 <main+0x22>
     302:	83 30       	cpi	r24, 0x03	; 3
     304:	91 05       	cpc	r25, r1
     306:	49 f0       	breq	.+18     	; 0x31a <main+0x5a>
     308:	04 97       	sbiw	r24, 0x04	; 4
		{
			case LEFT2RIGHT :
			shift_left22right_keep_ledon();
     30a:	49 f0       	breq	.+18     	; 0x31e <main+0x5e>
			break;
     30c:	ea cf       	rjmp	.-44     	; 0x2e2 <main+0x22>
			case RIGHT2LEFT :
			shift_right22left_keep_ledon();
     30e:	f5 de       	rcall	.-534    	; 0xfa <shift_left22right_keep_ledon>
     310:	e8 cf       	rjmp	.-48     	; 0x2e2 <main+0x22>
			break;
     312:	26 df       	rcall	.-436    	; 0x160 <shift_right22left_keep_ledon>
			case FLOWER_ON :
			flower_on2();
     314:	e6 cf       	rjmp	.-52     	; 0x2e2 <main+0x22>
     316:	57 df       	rcall	.-338    	; 0x1c6 <flower_on2>
			break;
     318:	e4 cf       	rjmp	.-56     	; 0x2e2 <main+0x22>
			case FLOWER_OFF :
			flower_off2();
     31a:	94 df       	rcall	.-216    	; 0x244 <flower_off2>
     31c:	e2 cf       	rjmp	.-60     	; 0x2e2 <main+0x22>
			break;
     31e:	d5 de       	rcall	.-598    	; 0xca <led_all_on_off>
			case ON_OFF:
			led_all_on_off();
     320:	e0 cf       	rjmp	.-64     	; 0x2e2 <main+0x22>

00000322 <init_timer0>:
	// 3. 8bit timer overflow : 0.004ms * 256개 카운트 = 0.001024sec = 1.024ms
	// 1ms가 정확히 안되자너... 1ms가 정확히 될려면 어떻게 해야하나?
	// 0.004ms * 250 = 0.001(=1ms)
	
	//진짜 나중에 추가한 코드임
	TCNT0 = 6; // 6부터 count하는것임, TCNT : 0~256카운트하기때문에, 정확히 1ms마다 TIMER0_OVF_vect로 진입한다.
     322:	86 e0       	ldi	r24, 0x06	; 6
     324:	82 bf       	out	0x32, r24	; 50
	
	TCCR0 |= (1 << CS02) | (0 << CS01) | (0 << CS00); // (1)분주비 64로 셋팅(p.296 표13-1 참고)
     326:	83 b7       	in	r24, 0x33	; 51
     328:	84 60       	ori	r24, 0x04	; 4
     32a:	83 bf       	out	0x33, r24	; 51
	TIMSK = 1 << TOIE0; // (2) TIMER0 overflow interrupt허용
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	87 bf       	out	0x37, r24	; 55
     330:	08 95       	ret

00000332 <__vector_16>:
}

// 256개의 pulse(=1ms)를 count하면 이곳으로 자동적으로 진입한다.
// 즉, 256개의 pulse == 1ms
ISR(TIMER0_OVF_vect){
     332:	1f 92       	push	r1
     334:	0f 92       	push	r0
     336:	0f b6       	in	r0, 0x3f	; 63
     338:	0f 92       	push	r0
     33a:	11 24       	eor	r1, r1
     33c:	8f 93       	push	r24
     33e:	9f 93       	push	r25
     340:	af 93       	push	r26
     342:	bf 93       	push	r27
	/* 인터럽트 루틴을 가능한 짧게 짜라, ms_count만 증가시키고 빠져나오게함 */
	TCNT0=6; // 6 ~ 256개의 pulse카운트 --> 1ms를 맞춰주기 위해서 TCNT0을 6으로 설정
     344:	86 e0       	ldi	r24, 0x06	; 6
     346:	82 bf       	out	0x32, r24	; 50
	ms_count++;
     348:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <ms_count>
     34c:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <ms_count+0x1>
     350:	a0 91 b4 01 	lds	r26, 0x01B4	; 0x8001b4 <ms_count+0x2>
     354:	b0 91 b5 01 	lds	r27, 0x01B5	; 0x8001b5 <ms_count+0x3>
     358:	01 96       	adiw	r24, 0x01	; 1
     35a:	a1 1d       	adc	r26, r1
     35c:	b1 1d       	adc	r27, r1
     35e:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <ms_count>
     362:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <ms_count+0x1>
     366:	a0 93 b4 01 	sts	0x01B4, r26	; 0x8001b4 <ms_count+0x2>
     36a:	b0 93 b5 01 	sts	0x01B5, r27	; 0x8001b5 <ms_count+0x3>
	//ms_count delay없애는 작업필요함
	shift_timer++;
     36e:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <shift_timer>
     372:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <shift_timer+0x1>
     376:	a0 91 b0 01 	lds	r26, 0x01B0	; 0x8001b0 <shift_timer+0x2>
     37a:	b0 91 b1 01 	lds	r27, 0x01B1	; 0x8001b1 <shift_timer+0x3>
     37e:	01 96       	adiw	r24, 0x01	; 1
     380:	a1 1d       	adc	r26, r1
     382:	b1 1d       	adc	r27, r1
     384:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <shift_timer>
     388:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <shift_timer+0x1>
     38c:	a0 93 b0 01 	sts	0x01B0, r26	; 0x8001b0 <shift_timer+0x2>
     390:	b0 93 b1 01 	sts	0x01B1, r27	; 0x8001b1 <shift_timer+0x3>
	ultrasonic_trigger_timer++;
     394:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <ultrasonic_trigger_timer>
     398:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <ultrasonic_trigger_timer+0x1>
     39c:	a0 91 ac 01 	lds	r26, 0x01AC	; 0x8001ac <ultrasonic_trigger_timer+0x2>
     3a0:	b0 91 ad 01 	lds	r27, 0x01AD	; 0x8001ad <ultrasonic_trigger_timer+0x3>
     3a4:	01 96       	adiw	r24, 0x01	; 1
     3a6:	a1 1d       	adc	r26, r1
     3a8:	b1 1d       	adc	r27, r1
     3aa:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <ultrasonic_trigger_timer>
     3ae:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <ultrasonic_trigger_timer+0x1>
     3b2:	a0 93 ac 01 	sts	0x01AC, r26	; 0x8001ac <ultrasonic_trigger_timer+0x2>
     3b6:	b0 93 ad 01 	sts	0x01AD, r27	; 0x8001ad <ultrasonic_trigger_timer+0x3>
}
     3ba:	bf 91       	pop	r27
     3bc:	af 91       	pop	r26
     3be:	9f 91       	pop	r25
     3c0:	8f 91       	pop	r24
     3c2:	0f 90       	pop	r0
     3c4:	0f be       	out	0x3f, r0	; 63
     3c6:	0f 90       	pop	r0
     3c8:	1f 90       	pop	r1
     3ca:	18 95       	reti

000003cc <__vector_18>:

// 3.RX인터럽트(수신) : interrupt를 활성화 시킬거야
// 인터럽트벡터 서비스루틴은 선언할 필요없고,제어만 해주면됨
// ISR : HW와 SW의 만남의 장소, 인터럽트가 뜨면 여기로 들어와라
// 1byte를 수신 할때 마다 이곳으로 들어온다.
ISR(USART0_RX_vect){
     3cc:	1f 92       	push	r1
     3ce:	0f 92       	push	r0
     3d0:	0f b6       	in	r0, 0x3f	; 63
     3d2:	0f 92       	push	r0
     3d4:	11 24       	eor	r1, r1
     3d6:	0b b6       	in	r0, 0x3b	; 59
     3d8:	0f 92       	push	r0
     3da:	2f 93       	push	r18
     3dc:	3f 93       	push	r19
     3de:	4f 93       	push	r20
     3e0:	5f 93       	push	r21
     3e2:	6f 93       	push	r22
     3e4:	7f 93       	push	r23
     3e6:	8f 93       	push	r24
     3e8:	9f 93       	push	r25
     3ea:	af 93       	push	r26
     3ec:	bf 93       	push	r27
     3ee:	ef 93       	push	r30
     3f0:	ff 93       	push	r31
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	1f 92       	push	r1
     3f8:	cd b7       	in	r28, 0x3d	; 61
     3fa:	de b7       	in	r29, 0x3e	; 62
	// 최적화 방지를위해 ISR내에서는 volatile키워드
	volatile static int i=0;
	// 1byte를 읽어 처리할 로직을 여기넣음
	volatile uint8_t data;
	
	data = UDR0; //UART0의 hardware register(UDR0)로 부터 1byte를 읽어간다.
     3fc:	8c b1       	in	r24, 0x0c	; 12
     3fe:	89 83       	std	Y+1, r24	; 0x01
	//printf("%c\n",data); // 하나찍을때 마다 1ms (다음 데이터 못받을수잇으므로 하지마라)
	if(data == '\r' || data == '\n'){
     400:	89 81       	ldd	r24, Y+1	; 0x01
     402:	8d 30       	cpi	r24, 0x0D	; 13
     404:	19 f0       	breq	.+6      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     406:	89 81       	ldd	r24, Y+1	; 0x01
     408:	8a 30       	cpi	r24, 0x0A	; 10
     40a:	61 f5       	brne	.+88     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
		rx_Quebuff[rear][i] = '\0'; //문장의 끝을 알리는 null sign을 insert함.
     40c:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <rear>
     410:	30 91 bb 01 	lds	r19, 0x01BB	; 0x8001bb <rear+0x1>
     414:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <i.2116>
     418:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <i.2116+0x1>
     41c:	48 e2       	ldi	r20, 0x28	; 40
     41e:	42 9f       	mul	r20, r18
     420:	f0 01       	movw	r30, r0
     422:	43 9f       	mul	r20, r19
     424:	f0 0d       	add	r31, r0
     426:	11 24       	eor	r1, r1
     428:	ec 53       	subi	r30, 0x3C	; 60
     42a:	fe 4f       	sbci	r31, 0xFE	; 254
     42c:	e8 0f       	add	r30, r24
     42e:	f9 1f       	adc	r31, r25
     430:	10 82       	st	Z, r1
		i = 0; // i를 초기화 : 다음 문장을 입력받을 준비
     432:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <i.2116+0x1>
     436:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <i.2116>
		rear++;
     43a:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <rear>
     43e:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <rear+0x1>
     442:	01 96       	adiw	r24, 0x01	; 1
     444:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <rear+0x1>
     448:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <rear>
		rear %= COMMAND_NUMBER;
     44c:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <rear>
     450:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <rear+0x1>
     454:	64 e1       	ldi	r22, 0x14	; 20
     456:	70 e0       	ldi	r23, 0x00	; 0
     458:	d8 d4       	rcall	.+2480   	; 0xe0a <__divmodhi4>
     45a:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <rear+0x1>
     45e:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <rear>
     462:	1c c0       	rjmp	.+56     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
		
		// Is queue full?
		
	}else{
		rx_Quebuff[rear][i++] = data;
     464:	60 91 ba 01 	lds	r22, 0x01BA	; 0x8001ba <rear>
     468:	70 91 bb 01 	lds	r23, 0x01BB	; 0x8001bb <rear+0x1>
     46c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <i.2116>
     470:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <i.2116+0x1>
     474:	9c 01       	movw	r18, r24
     476:	2f 5f       	subi	r18, 0xFF	; 255
     478:	3f 4f       	sbci	r19, 0xFF	; 255
     47a:	30 93 b7 01 	sts	0x01B7, r19	; 0x8001b7 <i.2116+0x1>
     47e:	20 93 b6 01 	sts	0x01B6, r18	; 0x8001b6 <i.2116>
     482:	49 81       	ldd	r20, Y+1	; 0x01
     484:	58 e2       	ldi	r21, 0x28	; 40
     486:	56 9f       	mul	r21, r22
     488:	90 01       	movw	r18, r0
     48a:	57 9f       	mul	r21, r23
     48c:	30 0d       	add	r19, r0
     48e:	11 24       	eor	r1, r1
     490:	2c 53       	subi	r18, 0x3C	; 60
     492:	3e 4f       	sbci	r19, 0xFE	; 254
     494:	f9 01       	movw	r30, r18
     496:	e8 0f       	add	r30, r24
     498:	f9 1f       	adc	r31, r25
     49a:	40 83       	st	Z, r20
	}
}
     49c:	0f 90       	pop	r0
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	ff 91       	pop	r31
     4a4:	ef 91       	pop	r30
     4a6:	bf 91       	pop	r27
     4a8:	af 91       	pop	r26
     4aa:	9f 91       	pop	r25
     4ac:	8f 91       	pop	r24
     4ae:	7f 91       	pop	r23
     4b0:	6f 91       	pop	r22
     4b2:	5f 91       	pop	r21
     4b4:	4f 91       	pop	r20
     4b6:	3f 91       	pop	r19
     4b8:	2f 91       	pop	r18
     4ba:	0f 90       	pop	r0
     4bc:	0b be       	out	0x3b, r0	; 59
     4be:	0f 90       	pop	r0
     4c0:	0f be       	out	0x3f, r0	; 63
     4c2:	0f 90       	pop	r0
     4c4:	1f 90       	pop	r1
     4c6:	18 95       	reti

000004c8 <init_uart0>:

void init_uart0(void){
	// 표 9-9(p.219)
	UBRR0H = 0x00;
     4c8:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207; //9600bps설정하는것임 
     4cc:	8f ec       	ldi	r24, 0xCF	; 207
     4ce:	89 b9       	out	0x09, r24	; 9
	//data는 8bit고 non parity설정을하자 : UCSRnA레지스터
	
	UCSR0A |= 1 << U2X0; //2배속 통신
     4d0:	8b b1       	in	r24, 0x0b	; 11
     4d2:	82 60       	ori	r24, 0x02	; 2
     4d4:	8b b9       	out	0x0b, r24	; 11
	UCSR0C |= 0x06; // ASYNC(비동기) / data8bit / none parity
     4d6:	e5 e9       	ldi	r30, 0x95	; 149
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	80 81       	ld	r24, Z
     4dc:	86 60       	ori	r24, 0x06	; 6
     4de:	80 83       	st	Z, r24
	
	// RXEN0 : UART0로 부터 수신이 가능하도록 설정
	// TXEN0 : UART0로 부터 송신이 가능하도록 설정
	// RXCIEN0 : UART0로 부터 1byte가 들어오면(stopbit까지 수신완료된 상황)이면, rx 인터럽트를 발생시킨다.
	UCSR0B |= 1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0;
     4e0:	8a b1       	in	r24, 0x0a	; 10
     4e2:	88 69       	ori	r24, 0x98	; 152
     4e4:	8a b9       	out	0x0a, r24	; 10
     4e6:	08 95       	ret

000004e8 <UART0_transmit>:
}


//UART0를 1byte를 전송하는 함수
void UART0_transmit(uint8_t data){
	while(!(UCSR0A & 1 << UDRE0));
     4e8:	5d 9b       	sbis	0x0b, 5	; 11
     4ea:	fe cf       	rjmp	.-4      	; 0x4e8 <UART0_transmit>
		// 우선순위가 << : 5, & : 8
		//UDRE0는 5비트위치
		//데이터가 전송중이면 전송이 끝날때 까지 기다린다.
		// no operation : NOP
		UDR0 = data; 
     4ec:	8c b9       	out	0x0c, r24	; 12
     4ee:	08 95       	ret

000004f0 <pc_command_processing>:
}

// UART ISR에서, rx_ready_flag = 1;된후
// command parsing작업 필요
void pc_command_processing()
{
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
	char* cmd;
	if( front != rear){
     4f4:	20 91 b8 01 	lds	r18, 0x01B8	; 0x8001b8 <front>
     4f8:	30 91 b9 01 	lds	r19, 0x01B9	; 0x8001b9 <front+0x1>
     4fc:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <rear>
     500:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <rear+0x1>
     504:	28 17       	cp	r18, r24
     506:	39 07       	cpc	r19, r25
     508:	09 f4       	brne	.+2      	; 0x50c <pc_command_processing+0x1c>
     50a:	83 c0       	rjmp	.+262    	; 0x612 <pc_command_processing+0x122>
		cmd = rx_Quebuff[front]; //&rx_buff[front][0]로 // 2차원 배열의 0번째 주소를 넘겨줌 
     50c:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <front>
     510:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <front+0x1>
     514:	28 e2       	ldi	r18, 0x28	; 40
     516:	28 9f       	mul	r18, r24
     518:	e0 01       	movw	r28, r0
     51a:	29 9f       	mul	r18, r25
     51c:	d0 0d       	add	r29, r0
     51e:	11 24       	eor	r1, r1
     520:	cc 53       	subi	r28, 0x3C	; 60
     522:	de 4f       	sbci	r29, 0xFE	; 254
		printf("%s\n",cmd); 
     524:	ce 01       	movw	r24, r28
     526:	b9 d4       	rcall	.+2418   	; 0xe9a <puts>
		front = (front+1) % 20;	
     528:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <front>
     52c:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <front+0x1>
     530:	01 96       	adiw	r24, 0x01	; 1
     532:	64 e1       	ldi	r22, 0x14	; 20
     534:	70 e0       	ldi	r23, 0x00	; 0
     536:	69 d4       	rcall	.+2258   	; 0xe0a <__divmodhi4>
     538:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <front+0x1>
     53c:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <front>
		
		// Is queue full?
		
		if(strncmp(cmd,"led_all_on",strlen("led_all_on")) == 0){
     540:	4a e0       	ldi	r20, 0x0A	; 10
     542:	50 e0       	ldi	r21, 0x00	; 0
     544:	6e e1       	ldi	r22, 0x1E	; 30
     546:	71 e0       	ldi	r23, 0x01	; 1
     548:	ce 01       	movw	r24, r28
     54a:	86 d4       	rcall	.+2316   	; 0xe58 <strncmp>
     54c:	89 2b       	or	r24, r25
     54e:	49 f4       	brne	.+18     	; 0x562 <pc_command_processing+0x72>
			LED_PORT = 0xff;
     550:	8f ef       	ldi	r24, 0xFF	; 255
     552:	8b bb       	out	0x1b, r24	; 27
			job = 5;
     554:	85 e0       	ldi	r24, 0x05	; 5
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     55c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     560:	58 c0       	rjmp	.+176    	; 0x612 <pc_command_processing+0x122>
		}else if(strncmp(cmd,"led_all_off",strlen("led_all_off")) == 0){
     562:	4b e0       	ldi	r20, 0x0B	; 11
     564:	50 e0       	ldi	r21, 0x00	; 0
     566:	69 e2       	ldi	r22, 0x29	; 41
     568:	71 e0       	ldi	r23, 0x01	; 1
     56a:	ce 01       	movw	r24, r28
     56c:	75 d4       	rcall	.+2282   	; 0xe58 <strncmp>
     56e:	89 2b       	or	r24, r25
     570:	41 f4       	brne	.+16     	; 0x582 <pc_command_processing+0x92>
			LED_PORT = 0x00;
     572:	1b ba       	out	0x1b, r1	; 27
			job = 5;
     574:	85 e0       	ldi	r24, 0x05	; 5
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     57c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     580:	48 c0       	rjmp	.+144    	; 0x612 <pc_command_processing+0x122>
		}else if(strncmp(cmd,"led_all_on_off",strlen("led_all_on_off"))==0){
     582:	4e e0       	ldi	r20, 0x0E	; 14
     584:	50 e0       	ldi	r21, 0x00	; 0
     586:	65 e3       	ldi	r22, 0x35	; 53
     588:	71 e0       	ldi	r23, 0x01	; 1
     58a:	ce 01       	movw	r24, r28
     58c:	65 d4       	rcall	.+2250   	; 0xe58 <strncmp>
     58e:	89 2b       	or	r24, r25
     590:	39 f4       	brne	.+14     	; 0x5a0 <pc_command_processing+0xb0>
			job = 4;
     592:	84 e0       	ldi	r24, 0x04	; 4
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     59a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     59e:	39 c0       	rjmp	.+114    	; 0x612 <pc_command_processing+0x122>
		}else if(strncmp(cmd,"shift_left22right_keep_ledon",strlen("shift_left22right_keep_ledon")) == 0){
     5a0:	4c e1       	ldi	r20, 0x1C	; 28
     5a2:	50 e0       	ldi	r21, 0x00	; 0
     5a4:	64 e4       	ldi	r22, 0x44	; 68
     5a6:	71 e0       	ldi	r23, 0x01	; 1
     5a8:	ce 01       	movw	r24, r28
     5aa:	56 d4       	rcall	.+2220   	; 0xe58 <strncmp>
     5ac:	89 2b       	or	r24, r25
     5ae:	29 f4       	brne	.+10     	; 0x5ba <pc_command_processing+0xca>
			job = 0;
     5b0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     5b4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}else if(strncmp(cmd,"shift_right22left_keep_ledon",strlen("shift_right22left_keep_ledon")) == 0){
     5b8:	2c c0       	rjmp	.+88     	; 0x612 <pc_command_processing+0x122>
     5ba:	4c e1       	ldi	r20, 0x1C	; 28
     5bc:	50 e0       	ldi	r21, 0x00	; 0
     5be:	61 e6       	ldi	r22, 0x61	; 97
     5c0:	71 e0       	ldi	r23, 0x01	; 1
     5c2:	ce 01       	movw	r24, r28
     5c4:	49 d4       	rcall	.+2194   	; 0xe58 <strncmp>
     5c6:	89 2b       	or	r24, r25
     5c8:	39 f4       	brne	.+14     	; 0x5d8 <pc_command_processing+0xe8>
			job = 1;
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     5d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}else if(strncmp(cmd,"flower_on2",strlen("flower_on2"))==0){
     5d6:	1d c0       	rjmp	.+58     	; 0x612 <pc_command_processing+0x122>
     5d8:	4a e0       	ldi	r20, 0x0A	; 10
     5da:	50 e0       	ldi	r21, 0x00	; 0
     5dc:	6e e7       	ldi	r22, 0x7E	; 126
     5de:	71 e0       	ldi	r23, 0x01	; 1
     5e0:	ce 01       	movw	r24, r28
     5e2:	3a d4       	rcall	.+2164   	; 0xe58 <strncmp>
     5e4:	89 2b       	or	r24, r25
     5e6:	39 f4       	brne	.+14     	; 0x5f6 <pc_command_processing+0x106>
			job = 2;
     5e8:	82 e0       	ldi	r24, 0x02	; 2
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     5f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}else if(strncmp(cmd,"flower_off2",strlen("flower_off2"))==0){
     5f4:	0e c0       	rjmp	.+28     	; 0x612 <pc_command_processing+0x122>
     5f6:	4b e0       	ldi	r20, 0x0B	; 11
     5f8:	50 e0       	ldi	r21, 0x00	; 0
     5fa:	69 e8       	ldi	r22, 0x89	; 137
     5fc:	71 e0       	ldi	r23, 0x01	; 1
     5fe:	ce 01       	movw	r24, r28
     600:	2b d4       	rcall	.+2134   	; 0xe58 <strncmp>
     602:	89 2b       	or	r24, r25
     604:	31 f4       	brne	.+12     	; 0x612 <pc_command_processing+0x122>
			job = 3;
     606:	83 e0       	ldi	r24, 0x03	; 3
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     60e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	}
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	08 95       	ret

00000618 <__vector_30>:
	while(!(UCSR1A & 1 << UDRE1));
	// 우선순위가 << : 5, & : 8
	//UDRE0는 5비트위치
	//데이터가 전송중이면 전송이 끝날때 까지 기다린다.
	// no operation : NOP
	UDR1 = data;
     618:	1f 92       	push	r1
     61a:	0f 92       	push	r0
     61c:	0f b6       	in	r0, 0x3f	; 63
     61e:	0f 92       	push	r0
     620:	11 24       	eor	r1, r1
     622:	0b b6       	in	r0, 0x3b	; 59
     624:	0f 92       	push	r0
     626:	2f 93       	push	r18
     628:	3f 93       	push	r19
     62a:	4f 93       	push	r20
     62c:	5f 93       	push	r21
     62e:	6f 93       	push	r22
     630:	7f 93       	push	r23
     632:	8f 93       	push	r24
     634:	9f 93       	push	r25
     636:	af 93       	push	r26
     638:	bf 93       	push	r27
     63a:	ef 93       	push	r30
     63c:	ff 93       	push	r31
     63e:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     642:	8d 30       	cpi	r24, 0x0D	; 13
     644:	11 f0       	breq	.+4      	; 0x64a <__vector_30+0x32>
     646:	8a 30       	cpi	r24, 0x0A	; 10
     648:	61 f5       	brne	.+88     	; 0x6a2 <__vector_30+0x8a>
     64a:	20 91 c0 01 	lds	r18, 0x01C0	; 0x8001c0 <rear1>
     64e:	30 91 c1 01 	lds	r19, 0x01C1	; 0x8001c1 <rear1+0x1>
     652:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <i.2118>
     656:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <i.2118+0x1>
     65a:	48 e2       	ldi	r20, 0x28	; 40
     65c:	42 9f       	mul	r20, r18
     65e:	f0 01       	movw	r30, r0
     660:	43 9f       	mul	r20, r19
     662:	f0 0d       	add	r31, r0
     664:	11 24       	eor	r1, r1
     666:	ec 51       	subi	r30, 0x1C	; 28
     668:	fb 4f       	sbci	r31, 0xFB	; 251
     66a:	e8 0f       	add	r30, r24
     66c:	f9 1f       	adc	r31, r25
     66e:	10 82       	st	Z, r1
     670:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <i.2118+0x1>
     674:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <i.2118>
     678:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <rear1>
     67c:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <rear1+0x1>
     680:	01 96       	adiw	r24, 0x01	; 1
     682:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <rear1+0x1>
     686:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <rear1>
     68a:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <rear1>
     68e:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <rear1+0x1>
     692:	64 e1       	ldi	r22, 0x14	; 20
     694:	70 e0       	ldi	r23, 0x00	; 0
     696:	b9 d3       	rcall	.+1906   	; 0xe0a <__divmodhi4>
     698:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <rear1+0x1>
     69c:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <rear1>
     6a0:	1b c0       	rjmp	.+54     	; 0x6d8 <__vector_30+0xc0>
     6a2:	60 91 c0 01 	lds	r22, 0x01C0	; 0x8001c0 <rear1>
     6a6:	70 91 c1 01 	lds	r23, 0x01C1	; 0x8001c1 <rear1+0x1>
     6aa:	20 91 bc 01 	lds	r18, 0x01BC	; 0x8001bc <i.2118>
     6ae:	30 91 bd 01 	lds	r19, 0x01BD	; 0x8001bd <i.2118+0x1>
     6b2:	a9 01       	movw	r20, r18
     6b4:	4f 5f       	subi	r20, 0xFF	; 255
     6b6:	5f 4f       	sbci	r21, 0xFF	; 255
     6b8:	50 93 bd 01 	sts	0x01BD, r21	; 0x8001bd <i.2118+0x1>
     6bc:	40 93 bc 01 	sts	0x01BC, r20	; 0x8001bc <i.2118>
     6c0:	98 e2       	ldi	r25, 0x28	; 40
     6c2:	96 9f       	mul	r25, r22
     6c4:	a0 01       	movw	r20, r0
     6c6:	97 9f       	mul	r25, r23
     6c8:	50 0d       	add	r21, r0
     6ca:	11 24       	eor	r1, r1
     6cc:	4c 51       	subi	r20, 0x1C	; 28
     6ce:	5b 4f       	sbci	r21, 0xFB	; 251
     6d0:	fa 01       	movw	r30, r20
     6d2:	e2 0f       	add	r30, r18
     6d4:	f3 1f       	adc	r31, r19
     6d6:	80 83       	st	Z, r24
     6d8:	ff 91       	pop	r31
     6da:	ef 91       	pop	r30
     6dc:	bf 91       	pop	r27
     6de:	af 91       	pop	r26
     6e0:	9f 91       	pop	r25
     6e2:	8f 91       	pop	r24
     6e4:	7f 91       	pop	r23
     6e6:	6f 91       	pop	r22
     6e8:	5f 91       	pop	r21
     6ea:	4f 91       	pop	r20
     6ec:	3f 91       	pop	r19
     6ee:	2f 91       	pop	r18
     6f0:	0f 90       	pop	r0
     6f2:	0b be       	out	0x3b, r0	; 59
     6f4:	0f 90       	pop	r0
     6f6:	0f be       	out	0x3f, r0	; 63
     6f8:	0f 90       	pop	r0
     6fa:	1f 90       	pop	r1
     6fc:	18 95       	reti

000006fe <init_uart1>:
     6fe:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     702:	8f ec       	ldi	r24, 0xCF	; 207
     704:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     708:	eb e9       	ldi	r30, 0x9B	; 155
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	80 81       	ld	r24, Z
     70e:	82 60       	ori	r24, 0x02	; 2
     710:	80 83       	st	Z, r24
     712:	ed e9       	ldi	r30, 0x9D	; 157
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	80 81       	ld	r24, Z
     718:	86 60       	ori	r24, 0x06	; 6
     71a:	80 83       	st	Z, r24
     71c:	ea e9       	ldi	r30, 0x9A	; 154
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	80 81       	ld	r24, Z
     722:	88 69       	ori	r24, 0x98	; 152
     724:	80 83       	st	Z, r24
     726:	08 95       	ret

00000728 <bit_command_processing>:
}

// UART ISR에서, rx_ready_flag = 1;된후
// command parsing작업 필요
void bit_command_processing()
{
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
	char* cmd;
	if( front1 != rear1){
     72c:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <front1>
     730:	30 91 bf 01 	lds	r19, 0x01BF	; 0x8001bf <front1+0x1>
     734:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <rear1>
     738:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <rear1+0x1>
     73c:	28 17       	cp	r18, r24
     73e:	39 07       	cpc	r19, r25
     740:	09 f4       	brne	.+2      	; 0x744 <bit_command_processing+0x1c>
     742:	81 c0       	rjmp	.+258    	; 0x846 <bit_command_processing+0x11e>
		cmd = rx1_Quebuff[front1];
     744:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <front1>
     748:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <front1+0x1>
     74c:	28 e2       	ldi	r18, 0x28	; 40
     74e:	28 9f       	mul	r18, r24
     750:	e0 01       	movw	r28, r0
     752:	29 9f       	mul	r18, r25
     754:	d0 0d       	add	r29, r0
     756:	11 24       	eor	r1, r1
     758:	cc 51       	subi	r28, 0x1C	; 28
     75a:	db 4f       	sbci	r29, 0xFB	; 251
		// printf("%s\n",cmd);
		front1 = (front1+1) % 20;
     75c:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <front1>
     760:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <front1+0x1>
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	64 e1       	ldi	r22, 0x14	; 20
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	4f d3       	rcall	.+1694   	; 0xe0a <__divmodhi4>
     76c:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <front1+0x1>
     770:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <front1>
		if(strncmp(cmd,"led_all_on",strlen("led_all_on")) == 0){
     774:	4a e0       	ldi	r20, 0x0A	; 10
     776:	50 e0       	ldi	r21, 0x00	; 0
     778:	6e e1       	ldi	r22, 0x1E	; 30
     77a:	71 e0       	ldi	r23, 0x01	; 1
     77c:	ce 01       	movw	r24, r28
     77e:	6c d3       	rcall	.+1752   	; 0xe58 <strncmp>
     780:	89 2b       	or	r24, r25
     782:	49 f4       	brne	.+18     	; 0x796 <bit_command_processing+0x6e>
			LED_PORT = 0xff;
     784:	8f ef       	ldi	r24, 0xFF	; 255
     786:	8b bb       	out	0x1b, r24	; 27
			job = 5;
     788:	85 e0       	ldi	r24, 0x05	; 5
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     790:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     794:	58 c0       	rjmp	.+176    	; 0x846 <bit_command_processing+0x11e>
			}else if(strncmp(cmd,"led_all_off",strlen("led_all_off")) == 0){
     796:	4b e0       	ldi	r20, 0x0B	; 11
     798:	50 e0       	ldi	r21, 0x00	; 0
     79a:	69 e2       	ldi	r22, 0x29	; 41
     79c:	71 e0       	ldi	r23, 0x01	; 1
     79e:	ce 01       	movw	r24, r28
     7a0:	5b d3       	rcall	.+1718   	; 0xe58 <strncmp>
     7a2:	89 2b       	or	r24, r25
     7a4:	41 f4       	brne	.+16     	; 0x7b6 <bit_command_processing+0x8e>
			LED_PORT = 0x00;
     7a6:	1b ba       	out	0x1b, r1	; 27
			job = 5;
     7a8:	85 e0       	ldi	r24, 0x05	; 5
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     7b0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     7b4:	48 c0       	rjmp	.+144    	; 0x846 <bit_command_processing+0x11e>
			}else if(strncmp(cmd,"led_all_on_off",strlen("led_all_on_off"))==0){
     7b6:	4e e0       	ldi	r20, 0x0E	; 14
     7b8:	50 e0       	ldi	r21, 0x00	; 0
     7ba:	65 e3       	ldi	r22, 0x35	; 53
     7bc:	71 e0       	ldi	r23, 0x01	; 1
     7be:	ce 01       	movw	r24, r28
     7c0:	4b d3       	rcall	.+1686   	; 0xe58 <strncmp>
     7c2:	89 2b       	or	r24, r25
     7c4:	39 f4       	brne	.+14     	; 0x7d4 <bit_command_processing+0xac>
			job = 4;
     7c6:	84 e0       	ldi	r24, 0x04	; 4
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     7ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     7d2:	39 c0       	rjmp	.+114    	; 0x846 <bit_command_processing+0x11e>
			}else if(strncmp(cmd,"shift_left22right_keep_ledon",strlen("shift_left22right_keep_ledon")) == 0){
     7d4:	4c e1       	ldi	r20, 0x1C	; 28
     7d6:	50 e0       	ldi	r21, 0x00	; 0
     7d8:	64 e4       	ldi	r22, 0x44	; 68
     7da:	71 e0       	ldi	r23, 0x01	; 1
     7dc:	ce 01       	movw	r24, r28
     7de:	3c d3       	rcall	.+1656   	; 0xe58 <strncmp>
     7e0:	89 2b       	or	r24, r25
     7e2:	29 f4       	brne	.+10     	; 0x7ee <bit_command_processing+0xc6>
			job = 0;
     7e4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     7e8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     7ec:	2c c0       	rjmp	.+88     	; 0x846 <bit_command_processing+0x11e>
			}else if(strncmp(cmd,"shift_right22left_keep_ledon",strlen("shift_right22left_keep_ledon")) == 0){
     7ee:	4c e1       	ldi	r20, 0x1C	; 28
     7f0:	50 e0       	ldi	r21, 0x00	; 0
     7f2:	61 e6       	ldi	r22, 0x61	; 97
     7f4:	71 e0       	ldi	r23, 0x01	; 1
     7f6:	ce 01       	movw	r24, r28
     7f8:	2f d3       	rcall	.+1630   	; 0xe58 <strncmp>
     7fa:	89 2b       	or	r24, r25
     7fc:	39 f4       	brne	.+14     	; 0x80c <bit_command_processing+0xe4>
			job = 1;
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     806:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			}else if(strncmp(cmd,"flower_on2",strlen("flower_on2"))==0){
     80a:	1d c0       	rjmp	.+58     	; 0x846 <bit_command_processing+0x11e>
     80c:	4a e0       	ldi	r20, 0x0A	; 10
     80e:	50 e0       	ldi	r21, 0x00	; 0
     810:	6e e7       	ldi	r22, 0x7E	; 126
     812:	71 e0       	ldi	r23, 0x01	; 1
     814:	ce 01       	movw	r24, r28
     816:	20 d3       	rcall	.+1600   	; 0xe58 <strncmp>
     818:	89 2b       	or	r24, r25
     81a:	39 f4       	brne	.+14     	; 0x82a <bit_command_processing+0x102>
			job = 2;
     81c:	82 e0       	ldi	r24, 0x02	; 2
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     824:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			}else if(strncmp(cmd,"flower_off2",strlen("flower_off2"))==0){
     828:	0e c0       	rjmp	.+28     	; 0x846 <bit_command_processing+0x11e>
     82a:	4b e0       	ldi	r20, 0x0B	; 11
     82c:	50 e0       	ldi	r21, 0x00	; 0
     82e:	69 e8       	ldi	r22, 0x89	; 137
     830:	71 e0       	ldi	r23, 0x01	; 1
     832:	ce 01       	movw	r24, r28
     834:	11 d3       	rcall	.+1570   	; 0xe58 <strncmp>
     836:	89 2b       	or	r24, r25
     838:	31 f4       	brne	.+12     	; 0x846 <bit_command_processing+0x11e>
			job = 3;
     83a:	83 e0       	ldi	r24, 0x03	; 3
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     842:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	}
     846:	df 91       	pop	r29
     848:	cf 91       	pop	r28
     84a:	08 95       	ret

0000084c <__vector_5>:
char scm[50];

// ISR은 파일의 맨 위에 짜주는 것이 좋습니다.(중요하기 때문)
// PE4는 외부 INT4 초음파센서 상승,하강에지 둘다 이곳으로 들어온다.
// 결국은 상승에지에서 1번 / 하강에지에서 1번 2번 들어온다.
ISR(INT4_vect){
     84c:	1f 92       	push	r1
     84e:	0f 92       	push	r0
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	0f 92       	push	r0
     854:	11 24       	eor	r1, r1
     856:	0b b6       	in	r0, 0x3b	; 59
     858:	0f 92       	push	r0
     85a:	cf 92       	push	r12
     85c:	df 92       	push	r13
     85e:	ef 92       	push	r14
     860:	ff 92       	push	r15
     862:	2f 93       	push	r18
     864:	3f 93       	push	r19
     866:	4f 93       	push	r20
     868:	5f 93       	push	r21
     86a:	6f 93       	push	r22
     86c:	7f 93       	push	r23
     86e:	8f 93       	push	r24
     870:	9f 93       	push	r25
     872:	af 93       	push	r26
     874:	bf 93       	push	r27
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	ef 93       	push	r30
     87c:	ff 93       	push	r31
	// 1.상승 에지일때 처리하는 부분
	// port echo핀의 4번핀이 1이 됫을때임
	if(ECHO_PIN & (1<<ECHO)){
     87e:	0c 9b       	sbis	0x01, 4	; 1
     880:	03 c0       	rjmp	.+6      	; 0x888 <__vector_5+0x3c>
		// 이때부터 길이를 재기 시작함(pulse를 몇개를 count했는지를 통해서)
		//카운트된 펄스값을 us로 환산하면 길이가 나온다
		TCNT1 = 0;
     882:	1d bc       	out	0x2d, r1	; 45
     884:	1c bc       	out	0x2c, r1	; 44
     886:	a6 c0       	rjmp	.+332    	; 0x9d4 <__vector_5+0x188>
	}else {
		// 2.하강 에지일때 처리하는 부분
		// port echo핀의 4번핀이 0이 됫을때임
		/* 에코핀에 들어오는 펄스 길이를 us단위로 환산한다 
		(1024로 분주하잖아요?) */
		ultrasonic_distance = 1000000.0 * TCNT1 * 1024 / F_CPU;
     888:	6c b5       	in	r22, 0x2c	; 44
     88a:	7d b5       	in	r23, 0x2d	; 45
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	a3 d1       	rcall	.+838    	; 0xbd8 <__floatunsisf>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	34 e2       	ldi	r19, 0x24	; 36
     896:	44 e7       	ldi	r20, 0x74	; 116
     898:	59 e4       	ldi	r21, 0x49	; 73
     89a:	54 d2       	rcall	.+1192   	; 0xd44 <__mulsf3>
     89c:	20 e0       	ldi	r18, 0x00	; 0
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	40 e8       	ldi	r20, 0x80	; 128
     8a2:	54 e4       	ldi	r21, 0x44	; 68
     8a4:	4f d2       	rcall	.+1182   	; 0xd44 <__mulsf3>
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	34 e2       	ldi	r19, 0x24	; 36
     8aa:	44 e7       	ldi	r20, 0x74	; 116
     8ac:	5b e4       	ldi	r21, 0x4B	; 75
     8ae:	fb d0       	rcall	.+502    	; 0xaa6 <__divsf3>
     8b0:	62 d1       	rcall	.+708    	; 0xb76 <__fixsfsi>
     8b2:	70 93 c3 01 	sts	0x01C3, r23	; 0x8001c3 <ultrasonic_distance+0x1>
     8b6:	60 93 c2 01 	sts	0x01C2, r22	; 0x8001c2 <ultrasonic_distance>
		// 예) TCNT1에 10이 들어있다고 가정하자.
		// 15.625kHz의 1주기가 64us이다.
		// 0.000064 * 10 = 0.00064sec(640us)
		 // 640us / 58us = 11cm
		 // 1cm : 58us가 소요됨(왕복시간 반영)
		 sprintf(scm,"dis %dcm\n",ultrasonic_distance/58); //cm단위로 환산해준다
     8ba:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <ultrasonic_distance>
     8be:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <ultrasonic_distance+0x1>
     8c2:	ca e3       	ldi	r28, 0x3A	; 58
     8c4:	d0 e0       	ldi	r29, 0x00	; 0
     8c6:	be 01       	movw	r22, r28
     8c8:	a0 d2       	rcall	.+1344   	; 0xe0a <__divmodhi4>
     8ca:	7f 93       	push	r23
     8cc:	6f 93       	push	r22
     8ce:	85 e9       	ldi	r24, 0x95	; 149
     8d0:	91 e0       	ldi	r25, 0x01	; 1
     8d2:	9f 93       	push	r25
     8d4:	8f 93       	push	r24
     8d6:	88 e6       	ldi	r24, 0x68	; 104
     8d8:	98 e0       	ldi	r25, 0x08	; 8
     8da:	9f 93       	push	r25
     8dc:	8f 93       	push	r24
     8de:	0d d3       	rcall	.+1562   	; 0xefa <sprintf>
		 double distance =  ultrasonic_distance/58;
     8e0:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <ultrasonic_distance>
     8e4:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <ultrasonic_distance+0x1>
     8e8:	be 01       	movw	r22, r28
     8ea:	8f d2       	rcall	.+1310   	; 0xe0a <__divmodhi4>
     8ec:	07 2e       	mov	r0, r23
     8ee:	00 0c       	add	r0, r0
     8f0:	88 0b       	sbc	r24, r24
     8f2:	99 0b       	sbc	r25, r25
     8f4:	73 d1       	rcall	.+742    	; 0xbdc <__floatsisf>
     8f6:	6b 01       	movw	r12, r22
     8f8:	7c 01       	movw	r14, r24
     8fa:	0f 90       	pop	r0
		 if(distance > 4 && distance <= 5){
     8fc:	0f 90       	pop	r0
     8fe:	0f 90       	pop	r0
     900:	0f 90       	pop	r0
     902:	0f 90       	pop	r0
     904:	0f 90       	pop	r0
     906:	20 e0       	ldi	r18, 0x00	; 0
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	40 e8       	ldi	r20, 0x80	; 128
     90c:	50 e4       	ldi	r21, 0x40	; 64
     90e:	16 d2       	rcall	.+1068   	; 0xd3c <__gesf2>
     910:	18 16       	cp	r1, r24
     912:	64 f4       	brge	.+24     	; 0x92c <__vector_5+0xe0>
     914:	20 e0       	ldi	r18, 0x00	; 0
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	40 ea       	ldi	r20, 0xA0	; 160
     91a:	50 e4       	ldi	r21, 0x40	; 64
     91c:	c7 01       	movw	r24, r14
     91e:	b6 01       	movw	r22, r12
     920:	be d0       	rcall	.+380    	; 0xa9e <__cmpsf2>
     922:	18 16       	cp	r1, r24
     924:	1c f0       	brlt	.+6      	; 0x92c <__vector_5+0xe0>
			LED_PORT = 0x1f;
     926:	8f e1       	ldi	r24, 0x1F	; 31
     928:	8b bb       	out	0x1b, r24	; 27
     92a:	54 c0       	rjmp	.+168    	; 0x9d4 <__vector_5+0x188>
		 }else if(distance >3 && distance <= 4){
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	40 e4       	ldi	r20, 0x40	; 64
     932:	50 e4       	ldi	r21, 0x40	; 64
     934:	c7 01       	movw	r24, r14
     936:	b6 01       	movw	r22, r12
     938:	01 d2       	rcall	.+1026   	; 0xd3c <__gesf2>
     93a:	18 16       	cp	r1, r24
     93c:	64 f4       	brge	.+24     	; 0x956 <__vector_5+0x10a>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e8       	ldi	r20, 0x80	; 128
     944:	50 e4       	ldi	r21, 0x40	; 64
     946:	c7 01       	movw	r24, r14
     948:	b6 01       	movw	r22, r12
     94a:	a9 d0       	rcall	.+338    	; 0xa9e <__cmpsf2>
     94c:	18 16       	cp	r1, r24
     94e:	1c f0       	brlt	.+6      	; 0x956 <__vector_5+0x10a>
			 LED_PORT = 0x0f;
     950:	8f e0       	ldi	r24, 0x0F	; 15
     952:	8b bb       	out	0x1b, r24	; 27
     954:	3f c0       	rjmp	.+126    	; 0x9d4 <__vector_5+0x188>
		 }else if(distance > 2 && distance <= 3){
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	40 e0       	ldi	r20, 0x00	; 0
     95c:	50 e4       	ldi	r21, 0x40	; 64
     95e:	c7 01       	movw	r24, r14
     960:	b6 01       	movw	r22, r12
     962:	ec d1       	rcall	.+984    	; 0xd3c <__gesf2>
     964:	18 16       	cp	r1, r24
     966:	64 f4       	brge	.+24     	; 0x980 <__vector_5+0x134>
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	40 e4       	ldi	r20, 0x40	; 64
     96e:	50 e4       	ldi	r21, 0x40	; 64
     970:	c7 01       	movw	r24, r14
     972:	b6 01       	movw	r22, r12
     974:	94 d0       	rcall	.+296    	; 0xa9e <__cmpsf2>
     976:	18 16       	cp	r1, r24
     978:	1c f0       	brlt	.+6      	; 0x980 <__vector_5+0x134>
			 LED_PORT= 0x07;
     97a:	87 e0       	ldi	r24, 0x07	; 7
     97c:	8b bb       	out	0x1b, r24	; 27
     97e:	2a c0       	rjmp	.+84     	; 0x9d4 <__vector_5+0x188>
		 }else if(distance > 1 && distance <= 2){
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	40 e8       	ldi	r20, 0x80	; 128
     986:	5f e3       	ldi	r21, 0x3F	; 63
     988:	c7 01       	movw	r24, r14
     98a:	b6 01       	movw	r22, r12
     98c:	d7 d1       	rcall	.+942    	; 0xd3c <__gesf2>
     98e:	18 16       	cp	r1, r24
     990:	64 f4       	brge	.+24     	; 0x9aa <__vector_5+0x15e>
     992:	20 e0       	ldi	r18, 0x00	; 0
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	40 e0       	ldi	r20, 0x00	; 0
     998:	50 e4       	ldi	r21, 0x40	; 64
     99a:	c7 01       	movw	r24, r14
     99c:	b6 01       	movw	r22, r12
     99e:	7f d0       	rcall	.+254    	; 0xa9e <__cmpsf2>
     9a0:	18 16       	cp	r1, r24
     9a2:	1c f0       	brlt	.+6      	; 0x9aa <__vector_5+0x15e>
			 LED_PORT = 0x03;
     9a4:	83 e0       	ldi	r24, 0x03	; 3
     9a6:	8b bb       	out	0x1b, r24	; 27
		 }else if(distance > 0 && distance <= 1){
     9a8:	15 c0       	rjmp	.+42     	; 0x9d4 <__vector_5+0x188>
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	a9 01       	movw	r20, r18
     9b0:	c7 01       	movw	r24, r14
     9b2:	b6 01       	movw	r22, r12
     9b4:	c3 d1       	rcall	.+902    	; 0xd3c <__gesf2>
     9b6:	18 16       	cp	r1, r24
     9b8:	64 f4       	brge	.+24     	; 0x9d2 <__vector_5+0x186>
     9ba:	20 e0       	ldi	r18, 0x00	; 0
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	40 e8       	ldi	r20, 0x80	; 128
     9c0:	5f e3       	ldi	r21, 0x3F	; 63
     9c2:	c7 01       	movw	r24, r14
     9c4:	b6 01       	movw	r22, r12
     9c6:	6b d0       	rcall	.+214    	; 0xa9e <__cmpsf2>
     9c8:	18 16       	cp	r1, r24
     9ca:	1c f0       	brlt	.+6      	; 0x9d2 <__vector_5+0x186>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
			LED_PORT = 0x01;
     9ce:	8b bb       	out	0x1b, r24	; 27
     9d0:	01 c0       	rjmp	.+2      	; 0x9d4 <__vector_5+0x188>
     9d2:	1b ba       	out	0x1b, r1	; 27
		}else {
			 LED_PORT = 0x00;
     9d4:	ff 91       	pop	r31
		 }
	}
}
     9d6:	ef 91       	pop	r30
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	bf 91       	pop	r27
     9de:	af 91       	pop	r26
     9e0:	9f 91       	pop	r25
     9e2:	8f 91       	pop	r24
     9e4:	7f 91       	pop	r23
     9e6:	6f 91       	pop	r22
     9e8:	5f 91       	pop	r21
     9ea:	4f 91       	pop	r20
     9ec:	3f 91       	pop	r19
     9ee:	2f 91       	pop	r18
     9f0:	ff 90       	pop	r15
     9f2:	ef 90       	pop	r14
     9f4:	df 90       	pop	r13
     9f6:	cf 90       	pop	r12
     9f8:	0f 90       	pop	r0
     9fa:	0b be       	out	0x3b, r0	; 59
     9fc:	0f 90       	pop	r0
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	0f 90       	pop	r0
     a02:	1f 90       	pop	r1
     a04:	18 95       	reti

00000a06 <init_ultrasonic>:
     a06:	e4 e6       	ldi	r30, 0x64	; 100


void init_ultrasonic(){
	TRIG_DDR |= 1 << TRIG; // output mode로 설정
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	80 81       	ld	r24, Z
     a0c:	80 61       	ori	r24, 0x10	; 16
     a0e:	80 83       	st	Z, r24
	ECHO_DDR &= ~(1 << ECHO); //input mode로 설정
     a10:	82 b1       	in	r24, 0x02	; 2
     a12:	8f 7e       	andi	r24, 0xEF	; 239
     a14:	82 b9       	out	0x02, r24	; 2
	
	//p.289 표 12-6
	// 0 1로 해야 : 상승엣지, 하강엣지 둘다 INT를 뛰우도록 설정할 수 있음.
	EICRB |= 0 << ISC41 | 1 << ISC40;
     a16:	8a b7       	in	r24, 0x3a	; 58
     a18:	81 60       	ori	r24, 0x01	; 1
     a1a:	8a bf       	out	0x3a, r24	; 58
	// 16비트 타이머 1번을 설정을 해서 사용한다.
	// 16비트는 65535까지임
	// 16MHz clock
	// 16MHz를 1024 분주한다 16000000/1024 = 15625Hz = 15.625kHz
	// 1주기(1개의 pulse길이) T = 1/f = 1/15.625k = 0.000064 = 64us
	TCCR1B |= 1 << CS12 | 1 << CS10; //1024로 분주 설정 // timer1번 설정
     a1c:	8e b5       	in	r24, 0x2e	; 46
     a1e:	85 60       	ori	r24, 0x05	; 5
     a20:	8e bd       	out	0x2e, r24	; 46
	
	EIMSK |= 1 << INT4; // 외부 INT4(ECHO)사용
     a22:	89 b7       	in	r24, 0x39	; 57
     a24:	80 61       	ori	r24, 0x10	; 16
     a26:	89 bf       	out	0x39, r24	; 57
     a28:	08 95       	ret

00000a2a <ultrasonic_trigger>:
}

void ultrasonic_trigger(){
	TRIG_PORT &= ~(1 << TRIG); // LOW로 떨어트리는 것
     a2a:	e5 e6       	ldi	r30, 0x65	; 101
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	80 81       	ld	r24, Z
     a30:	8f 7e       	andi	r24, 0xEF	; 239
     a32:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a34:	85 e0       	ldi	r24, 0x05	; 5
     a36:	8a 95       	dec	r24
     a38:	f1 f7       	brne	.-4      	; 0xa36 <ultrasonic_trigger+0xc>
     a3a:	00 00       	nop
	_delay_us(1);
	TRIG_PORT |= 1 << TRIG; // HIGH 유지(15ms정도 high신호를 유지하자)
     a3c:	80 81       	ld	r24, Z
     a3e:	80 61       	ori	r24, 0x10	; 16
     a40:	80 83       	st	Z, r24
     a42:	8f e8       	ldi	r24, 0x8F	; 143
     a44:	91 e0       	ldi	r25, 0x01	; 1
     a46:	01 97       	sbiw	r24, 0x01	; 1
     a48:	f1 f7       	brne	.-4      	; 0xa46 <ultrasonic_trigger+0x1c>
     a4a:	00 c0       	rjmp	.+0      	; 0xa4c <ultrasonic_trigger+0x22>
     a4c:	00 00       	nop
	_delay_us(100);
	// 유지한 후 trigger신호를 low로 떨어트리자
	TRIG_PORT &= ~(1 << TRIG); // LOW로 떨어트리는 것
     a4e:	80 81       	ld	r24, Z
     a50:	8f 7e       	andi	r24, 0xEF	; 239
     a52:	80 83       	st	Z, r24
     a54:	08 95       	ret

00000a56 <ultrasonic_distance_check>:
}

void ultrasonic_distance_check(){
	if(ultrasonic_trigger_timer > 1000){
     a56:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <ultrasonic_trigger_timer>
     a5a:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <ultrasonic_trigger_timer+0x1>
     a5e:	a0 91 ac 01 	lds	r26, 0x01AC	; 0x8001ac <ultrasonic_trigger_timer+0x2>
     a62:	b0 91 ad 01 	lds	r27, 0x01AD	; 0x8001ad <ultrasonic_trigger_timer+0x3>
     a66:	89 3e       	cpi	r24, 0xE9	; 233
     a68:	93 40       	sbci	r25, 0x03	; 3
     a6a:	a1 05       	cpc	r26, r1
     a6c:	b1 05       	cpc	r27, r1
     a6e:	b0 f0       	brcs	.+44     	; 0xa9c <ultrasonic_distance_check+0x46>
		// 1초
		ultrasonic_trigger_timer = 0;
     a70:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <ultrasonic_trigger_timer>
     a74:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <ultrasonic_trigger_timer+0x1>
     a78:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <ultrasonic_trigger_timer+0x2>
     a7c:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <ultrasonic_trigger_timer+0x3>
		printf("%s",scm);
     a80:	88 e6       	ldi	r24, 0x68	; 104
     a82:	98 e0       	ldi	r25, 0x08	; 8
     a84:	9f 93       	push	r25
     a86:	8f 93       	push	r24
     a88:	8f e9       	ldi	r24, 0x9F	; 159
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	9f 93       	push	r25
     a8e:	8f 93       	push	r24
     a90:	f1 d1       	rcall	.+994    	; 0xe74 <printf>
		ultrasonic_trigger();
     a92:	cb df       	rcall	.-106    	; 0xa2a <ultrasonic_trigger>
     a94:	0f 90       	pop	r0
     a96:	0f 90       	pop	r0
     a98:	0f 90       	pop	r0
     a9a:	0f 90       	pop	r0
     a9c:	08 95       	ret

00000a9e <__cmpsf2>:
     a9e:	d9 d0       	rcall	.+434    	; 0xc52 <__fp_cmp>
     aa0:	08 f4       	brcc	.+2      	; 0xaa4 <__cmpsf2+0x6>
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	08 95       	ret

00000aa6 <__divsf3>:
     aa6:	0c d0       	rcall	.+24     	; 0xac0 <__divsf3x>
     aa8:	0f c1       	rjmp	.+542    	; 0xcc8 <__fp_round>
     aaa:	07 d1       	rcall	.+526    	; 0xcba <__fp_pscB>
     aac:	40 f0       	brcs	.+16     	; 0xabe <__divsf3+0x18>
     aae:	fe d0       	rcall	.+508    	; 0xcac <__fp_pscA>
     ab0:	30 f0       	brcs	.+12     	; 0xabe <__divsf3+0x18>
     ab2:	21 f4       	brne	.+8      	; 0xabc <__divsf3+0x16>
     ab4:	5f 3f       	cpi	r21, 0xFF	; 255
     ab6:	19 f0       	breq	.+6      	; 0xabe <__divsf3+0x18>
     ab8:	f0 c0       	rjmp	.+480    	; 0xc9a <__fp_inf>
     aba:	51 11       	cpse	r21, r1
     abc:	39 c1       	rjmp	.+626    	; 0xd30 <__fp_szero>
     abe:	f3 c0       	rjmp	.+486    	; 0xca6 <__fp_nan>

00000ac0 <__divsf3x>:
     ac0:	14 d1       	rcall	.+552    	; 0xcea <__fp_split3>
     ac2:	98 f3       	brcs	.-26     	; 0xaaa <__divsf3+0x4>

00000ac4 <__divsf3_pse>:
     ac4:	99 23       	and	r25, r25
     ac6:	c9 f3       	breq	.-14     	; 0xaba <__divsf3+0x14>
     ac8:	55 23       	and	r21, r21
     aca:	b1 f3       	breq	.-20     	; 0xab8 <__divsf3+0x12>
     acc:	95 1b       	sub	r25, r21
     ace:	55 0b       	sbc	r21, r21
     ad0:	bb 27       	eor	r27, r27
     ad2:	aa 27       	eor	r26, r26
     ad4:	62 17       	cp	r22, r18
     ad6:	73 07       	cpc	r23, r19
     ad8:	84 07       	cpc	r24, r20
     ada:	38 f0       	brcs	.+14     	; 0xaea <__divsf3_pse+0x26>
     adc:	9f 5f       	subi	r25, 0xFF	; 255
     ade:	5f 4f       	sbci	r21, 0xFF	; 255
     ae0:	22 0f       	add	r18, r18
     ae2:	33 1f       	adc	r19, r19
     ae4:	44 1f       	adc	r20, r20
     ae6:	aa 1f       	adc	r26, r26
     ae8:	a9 f3       	breq	.-22     	; 0xad4 <__divsf3_pse+0x10>
     aea:	33 d0       	rcall	.+102    	; 0xb52 <__divsf3_pse+0x8e>
     aec:	0e 2e       	mov	r0, r30
     aee:	3a f0       	brmi	.+14     	; 0xafe <__divsf3_pse+0x3a>
     af0:	e0 e8       	ldi	r30, 0x80	; 128
     af2:	30 d0       	rcall	.+96     	; 0xb54 <__divsf3_pse+0x90>
     af4:	91 50       	subi	r25, 0x01	; 1
     af6:	50 40       	sbci	r21, 0x00	; 0
     af8:	e6 95       	lsr	r30
     afa:	00 1c       	adc	r0, r0
     afc:	ca f7       	brpl	.-14     	; 0xaf0 <__divsf3_pse+0x2c>
     afe:	29 d0       	rcall	.+82     	; 0xb52 <__divsf3_pse+0x8e>
     b00:	fe 2f       	mov	r31, r30
     b02:	27 d0       	rcall	.+78     	; 0xb52 <__divsf3_pse+0x8e>
     b04:	66 0f       	add	r22, r22
     b06:	77 1f       	adc	r23, r23
     b08:	88 1f       	adc	r24, r24
     b0a:	bb 1f       	adc	r27, r27
     b0c:	26 17       	cp	r18, r22
     b0e:	37 07       	cpc	r19, r23
     b10:	48 07       	cpc	r20, r24
     b12:	ab 07       	cpc	r26, r27
     b14:	b0 e8       	ldi	r27, 0x80	; 128
     b16:	09 f0       	breq	.+2      	; 0xb1a <__divsf3_pse+0x56>
     b18:	bb 0b       	sbc	r27, r27
     b1a:	80 2d       	mov	r24, r0
     b1c:	bf 01       	movw	r22, r30
     b1e:	ff 27       	eor	r31, r31
     b20:	93 58       	subi	r25, 0x83	; 131
     b22:	5f 4f       	sbci	r21, 0xFF	; 255
     b24:	2a f0       	brmi	.+10     	; 0xb30 <__divsf3_pse+0x6c>
     b26:	9e 3f       	cpi	r25, 0xFE	; 254
     b28:	51 05       	cpc	r21, r1
     b2a:	68 f0       	brcs	.+26     	; 0xb46 <__divsf3_pse+0x82>
     b2c:	b6 c0       	rjmp	.+364    	; 0xc9a <__fp_inf>
     b2e:	00 c1       	rjmp	.+512    	; 0xd30 <__fp_szero>
     b30:	5f 3f       	cpi	r21, 0xFF	; 255
     b32:	ec f3       	brlt	.-6      	; 0xb2e <__divsf3_pse+0x6a>
     b34:	98 3e       	cpi	r25, 0xE8	; 232
     b36:	dc f3       	brlt	.-10     	; 0xb2e <__divsf3_pse+0x6a>
     b38:	86 95       	lsr	r24
     b3a:	77 95       	ror	r23
     b3c:	67 95       	ror	r22
     b3e:	b7 95       	ror	r27
     b40:	f7 95       	ror	r31
     b42:	9f 5f       	subi	r25, 0xFF	; 255
     b44:	c9 f7       	brne	.-14     	; 0xb38 <__divsf3_pse+0x74>
     b46:	88 0f       	add	r24, r24
     b48:	91 1d       	adc	r25, r1
     b4a:	96 95       	lsr	r25
     b4c:	87 95       	ror	r24
     b4e:	97 f9       	bld	r25, 7
     b50:	08 95       	ret
     b52:	e1 e0       	ldi	r30, 0x01	; 1
     b54:	66 0f       	add	r22, r22
     b56:	77 1f       	adc	r23, r23
     b58:	88 1f       	adc	r24, r24
     b5a:	bb 1f       	adc	r27, r27
     b5c:	62 17       	cp	r22, r18
     b5e:	73 07       	cpc	r23, r19
     b60:	84 07       	cpc	r24, r20
     b62:	ba 07       	cpc	r27, r26
     b64:	20 f0       	brcs	.+8      	; 0xb6e <__divsf3_pse+0xaa>
     b66:	62 1b       	sub	r22, r18
     b68:	73 0b       	sbc	r23, r19
     b6a:	84 0b       	sbc	r24, r20
     b6c:	ba 0b       	sbc	r27, r26
     b6e:	ee 1f       	adc	r30, r30
     b70:	88 f7       	brcc	.-30     	; 0xb54 <__divsf3_pse+0x90>
     b72:	e0 95       	com	r30
     b74:	08 95       	ret

00000b76 <__fixsfsi>:
     b76:	04 d0       	rcall	.+8      	; 0xb80 <__fixunssfsi>
     b78:	68 94       	set
     b7a:	b1 11       	cpse	r27, r1
     b7c:	d9 c0       	rjmp	.+434    	; 0xd30 <__fp_szero>
     b7e:	08 95       	ret

00000b80 <__fixunssfsi>:
     b80:	bc d0       	rcall	.+376    	; 0xcfa <__fp_splitA>
     b82:	88 f0       	brcs	.+34     	; 0xba6 <__fixunssfsi+0x26>
     b84:	9f 57       	subi	r25, 0x7F	; 127
     b86:	90 f0       	brcs	.+36     	; 0xbac <__fixunssfsi+0x2c>
     b88:	b9 2f       	mov	r27, r25
     b8a:	99 27       	eor	r25, r25
     b8c:	b7 51       	subi	r27, 0x17	; 23
     b8e:	a0 f0       	brcs	.+40     	; 0xbb8 <__fixunssfsi+0x38>
     b90:	d1 f0       	breq	.+52     	; 0xbc6 <__fixunssfsi+0x46>
     b92:	66 0f       	add	r22, r22
     b94:	77 1f       	adc	r23, r23
     b96:	88 1f       	adc	r24, r24
     b98:	99 1f       	adc	r25, r25
     b9a:	1a f0       	brmi	.+6      	; 0xba2 <__fixunssfsi+0x22>
     b9c:	ba 95       	dec	r27
     b9e:	c9 f7       	brne	.-14     	; 0xb92 <__fixunssfsi+0x12>
     ba0:	12 c0       	rjmp	.+36     	; 0xbc6 <__fixunssfsi+0x46>
     ba2:	b1 30       	cpi	r27, 0x01	; 1
     ba4:	81 f0       	breq	.+32     	; 0xbc6 <__fixunssfsi+0x46>
     ba6:	c3 d0       	rcall	.+390    	; 0xd2e <__fp_zero>
     ba8:	b1 e0       	ldi	r27, 0x01	; 1
     baa:	08 95       	ret
     bac:	c0 c0       	rjmp	.+384    	; 0xd2e <__fp_zero>
     bae:	67 2f       	mov	r22, r23
     bb0:	78 2f       	mov	r23, r24
     bb2:	88 27       	eor	r24, r24
     bb4:	b8 5f       	subi	r27, 0xF8	; 248
     bb6:	39 f0       	breq	.+14     	; 0xbc6 <__fixunssfsi+0x46>
     bb8:	b9 3f       	cpi	r27, 0xF9	; 249
     bba:	cc f3       	brlt	.-14     	; 0xbae <__fixunssfsi+0x2e>
     bbc:	86 95       	lsr	r24
     bbe:	77 95       	ror	r23
     bc0:	67 95       	ror	r22
     bc2:	b3 95       	inc	r27
     bc4:	d9 f7       	brne	.-10     	; 0xbbc <__fixunssfsi+0x3c>
     bc6:	3e f4       	brtc	.+14     	; 0xbd6 <__fixunssfsi+0x56>
     bc8:	90 95       	com	r25
     bca:	80 95       	com	r24
     bcc:	70 95       	com	r23
     bce:	61 95       	neg	r22
     bd0:	7f 4f       	sbci	r23, 0xFF	; 255
     bd2:	8f 4f       	sbci	r24, 0xFF	; 255
     bd4:	9f 4f       	sbci	r25, 0xFF	; 255
     bd6:	08 95       	ret

00000bd8 <__floatunsisf>:
     bd8:	e8 94       	clt
     bda:	09 c0       	rjmp	.+18     	; 0xbee <__floatsisf+0x12>

00000bdc <__floatsisf>:
     bdc:	97 fb       	bst	r25, 7
     bde:	3e f4       	brtc	.+14     	; 0xbee <__floatsisf+0x12>
     be0:	90 95       	com	r25
     be2:	80 95       	com	r24
     be4:	70 95       	com	r23
     be6:	61 95       	neg	r22
     be8:	7f 4f       	sbci	r23, 0xFF	; 255
     bea:	8f 4f       	sbci	r24, 0xFF	; 255
     bec:	9f 4f       	sbci	r25, 0xFF	; 255
     bee:	99 23       	and	r25, r25
     bf0:	a9 f0       	breq	.+42     	; 0xc1c <__floatsisf+0x40>
     bf2:	f9 2f       	mov	r31, r25
     bf4:	96 e9       	ldi	r25, 0x96	; 150
     bf6:	bb 27       	eor	r27, r27
     bf8:	93 95       	inc	r25
     bfa:	f6 95       	lsr	r31
     bfc:	87 95       	ror	r24
     bfe:	77 95       	ror	r23
     c00:	67 95       	ror	r22
     c02:	b7 95       	ror	r27
     c04:	f1 11       	cpse	r31, r1
     c06:	f8 cf       	rjmp	.-16     	; 0xbf8 <__floatsisf+0x1c>
     c08:	fa f4       	brpl	.+62     	; 0xc48 <__floatsisf+0x6c>
     c0a:	bb 0f       	add	r27, r27
     c0c:	11 f4       	brne	.+4      	; 0xc12 <__floatsisf+0x36>
     c0e:	60 ff       	sbrs	r22, 0
     c10:	1b c0       	rjmp	.+54     	; 0xc48 <__floatsisf+0x6c>
     c12:	6f 5f       	subi	r22, 0xFF	; 255
     c14:	7f 4f       	sbci	r23, 0xFF	; 255
     c16:	8f 4f       	sbci	r24, 0xFF	; 255
     c18:	9f 4f       	sbci	r25, 0xFF	; 255
     c1a:	16 c0       	rjmp	.+44     	; 0xc48 <__floatsisf+0x6c>
     c1c:	88 23       	and	r24, r24
     c1e:	11 f0       	breq	.+4      	; 0xc24 <__floatsisf+0x48>
     c20:	96 e9       	ldi	r25, 0x96	; 150
     c22:	11 c0       	rjmp	.+34     	; 0xc46 <__floatsisf+0x6a>
     c24:	77 23       	and	r23, r23
     c26:	21 f0       	breq	.+8      	; 0xc30 <__floatsisf+0x54>
     c28:	9e e8       	ldi	r25, 0x8E	; 142
     c2a:	87 2f       	mov	r24, r23
     c2c:	76 2f       	mov	r23, r22
     c2e:	05 c0       	rjmp	.+10     	; 0xc3a <__floatsisf+0x5e>
     c30:	66 23       	and	r22, r22
     c32:	71 f0       	breq	.+28     	; 0xc50 <__floatsisf+0x74>
     c34:	96 e8       	ldi	r25, 0x86	; 134
     c36:	86 2f       	mov	r24, r22
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	2a f0       	brmi	.+10     	; 0xc48 <__floatsisf+0x6c>
     c3e:	9a 95       	dec	r25
     c40:	66 0f       	add	r22, r22
     c42:	77 1f       	adc	r23, r23
     c44:	88 1f       	adc	r24, r24
     c46:	da f7       	brpl	.-10     	; 0xc3e <__floatsisf+0x62>
     c48:	88 0f       	add	r24, r24
     c4a:	96 95       	lsr	r25
     c4c:	87 95       	ror	r24
     c4e:	97 f9       	bld	r25, 7
     c50:	08 95       	ret

00000c52 <__fp_cmp>:
     c52:	99 0f       	add	r25, r25
     c54:	00 08       	sbc	r0, r0
     c56:	55 0f       	add	r21, r21
     c58:	aa 0b       	sbc	r26, r26
     c5a:	e0 e8       	ldi	r30, 0x80	; 128
     c5c:	fe ef       	ldi	r31, 0xFE	; 254
     c5e:	16 16       	cp	r1, r22
     c60:	17 06       	cpc	r1, r23
     c62:	e8 07       	cpc	r30, r24
     c64:	f9 07       	cpc	r31, r25
     c66:	c0 f0       	brcs	.+48     	; 0xc98 <__fp_cmp+0x46>
     c68:	12 16       	cp	r1, r18
     c6a:	13 06       	cpc	r1, r19
     c6c:	e4 07       	cpc	r30, r20
     c6e:	f5 07       	cpc	r31, r21
     c70:	98 f0       	brcs	.+38     	; 0xc98 <__fp_cmp+0x46>
     c72:	62 1b       	sub	r22, r18
     c74:	73 0b       	sbc	r23, r19
     c76:	84 0b       	sbc	r24, r20
     c78:	95 0b       	sbc	r25, r21
     c7a:	39 f4       	brne	.+14     	; 0xc8a <__fp_cmp+0x38>
     c7c:	0a 26       	eor	r0, r26
     c7e:	61 f0       	breq	.+24     	; 0xc98 <__fp_cmp+0x46>
     c80:	23 2b       	or	r18, r19
     c82:	24 2b       	or	r18, r20
     c84:	25 2b       	or	r18, r21
     c86:	21 f4       	brne	.+8      	; 0xc90 <__fp_cmp+0x3e>
     c88:	08 95       	ret
     c8a:	0a 26       	eor	r0, r26
     c8c:	09 f4       	brne	.+2      	; 0xc90 <__fp_cmp+0x3e>
     c8e:	a1 40       	sbci	r26, 0x01	; 1
     c90:	a6 95       	lsr	r26
     c92:	8f ef       	ldi	r24, 0xFF	; 255
     c94:	81 1d       	adc	r24, r1
     c96:	81 1d       	adc	r24, r1
     c98:	08 95       	ret

00000c9a <__fp_inf>:
     c9a:	97 f9       	bld	r25, 7
     c9c:	9f 67       	ori	r25, 0x7F	; 127
     c9e:	80 e8       	ldi	r24, 0x80	; 128
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	60 e0       	ldi	r22, 0x00	; 0
     ca4:	08 95       	ret

00000ca6 <__fp_nan>:
     ca6:	9f ef       	ldi	r25, 0xFF	; 255
     ca8:	80 ec       	ldi	r24, 0xC0	; 192
     caa:	08 95       	ret

00000cac <__fp_pscA>:
     cac:	00 24       	eor	r0, r0
     cae:	0a 94       	dec	r0
     cb0:	16 16       	cp	r1, r22
     cb2:	17 06       	cpc	r1, r23
     cb4:	18 06       	cpc	r1, r24
     cb6:	09 06       	cpc	r0, r25
     cb8:	08 95       	ret

00000cba <__fp_pscB>:
     cba:	00 24       	eor	r0, r0
     cbc:	0a 94       	dec	r0
     cbe:	12 16       	cp	r1, r18
     cc0:	13 06       	cpc	r1, r19
     cc2:	14 06       	cpc	r1, r20
     cc4:	05 06       	cpc	r0, r21
     cc6:	08 95       	ret

00000cc8 <__fp_round>:
     cc8:	09 2e       	mov	r0, r25
     cca:	03 94       	inc	r0
     ccc:	00 0c       	add	r0, r0
     cce:	11 f4       	brne	.+4      	; 0xcd4 <__fp_round+0xc>
     cd0:	88 23       	and	r24, r24
     cd2:	52 f0       	brmi	.+20     	; 0xce8 <__fp_round+0x20>
     cd4:	bb 0f       	add	r27, r27
     cd6:	40 f4       	brcc	.+16     	; 0xce8 <__fp_round+0x20>
     cd8:	bf 2b       	or	r27, r31
     cda:	11 f4       	brne	.+4      	; 0xce0 <__fp_round+0x18>
     cdc:	60 ff       	sbrs	r22, 0
     cde:	04 c0       	rjmp	.+8      	; 0xce8 <__fp_round+0x20>
     ce0:	6f 5f       	subi	r22, 0xFF	; 255
     ce2:	7f 4f       	sbci	r23, 0xFF	; 255
     ce4:	8f 4f       	sbci	r24, 0xFF	; 255
     ce6:	9f 4f       	sbci	r25, 0xFF	; 255
     ce8:	08 95       	ret

00000cea <__fp_split3>:
     cea:	57 fd       	sbrc	r21, 7
     cec:	90 58       	subi	r25, 0x80	; 128
     cee:	44 0f       	add	r20, r20
     cf0:	55 1f       	adc	r21, r21
     cf2:	59 f0       	breq	.+22     	; 0xd0a <__fp_splitA+0x10>
     cf4:	5f 3f       	cpi	r21, 0xFF	; 255
     cf6:	71 f0       	breq	.+28     	; 0xd14 <__fp_splitA+0x1a>
     cf8:	47 95       	ror	r20

00000cfa <__fp_splitA>:
     cfa:	88 0f       	add	r24, r24
     cfc:	97 fb       	bst	r25, 7
     cfe:	99 1f       	adc	r25, r25
     d00:	61 f0       	breq	.+24     	; 0xd1a <__fp_splitA+0x20>
     d02:	9f 3f       	cpi	r25, 0xFF	; 255
     d04:	79 f0       	breq	.+30     	; 0xd24 <__fp_splitA+0x2a>
     d06:	87 95       	ror	r24
     d08:	08 95       	ret
     d0a:	12 16       	cp	r1, r18
     d0c:	13 06       	cpc	r1, r19
     d0e:	14 06       	cpc	r1, r20
     d10:	55 1f       	adc	r21, r21
     d12:	f2 cf       	rjmp	.-28     	; 0xcf8 <__fp_split3+0xe>
     d14:	46 95       	lsr	r20
     d16:	f1 df       	rcall	.-30     	; 0xcfa <__fp_splitA>
     d18:	08 c0       	rjmp	.+16     	; 0xd2a <__fp_splitA+0x30>
     d1a:	16 16       	cp	r1, r22
     d1c:	17 06       	cpc	r1, r23
     d1e:	18 06       	cpc	r1, r24
     d20:	99 1f       	adc	r25, r25
     d22:	f1 cf       	rjmp	.-30     	; 0xd06 <__fp_splitA+0xc>
     d24:	86 95       	lsr	r24
     d26:	71 05       	cpc	r23, r1
     d28:	61 05       	cpc	r22, r1
     d2a:	08 94       	sec
     d2c:	08 95       	ret

00000d2e <__fp_zero>:
     d2e:	e8 94       	clt

00000d30 <__fp_szero>:
     d30:	bb 27       	eor	r27, r27
     d32:	66 27       	eor	r22, r22
     d34:	77 27       	eor	r23, r23
     d36:	cb 01       	movw	r24, r22
     d38:	97 f9       	bld	r25, 7
     d3a:	08 95       	ret

00000d3c <__gesf2>:
     d3c:	8a df       	rcall	.-236    	; 0xc52 <__fp_cmp>
     d3e:	08 f4       	brcc	.+2      	; 0xd42 <__gesf2+0x6>
     d40:	8f ef       	ldi	r24, 0xFF	; 255
     d42:	08 95       	ret

00000d44 <__mulsf3>:
     d44:	0b d0       	rcall	.+22     	; 0xd5c <__mulsf3x>
     d46:	c0 cf       	rjmp	.-128    	; 0xcc8 <__fp_round>
     d48:	b1 df       	rcall	.-158    	; 0xcac <__fp_pscA>
     d4a:	28 f0       	brcs	.+10     	; 0xd56 <__mulsf3+0x12>
     d4c:	b6 df       	rcall	.-148    	; 0xcba <__fp_pscB>
     d4e:	18 f0       	brcs	.+6      	; 0xd56 <__mulsf3+0x12>
     d50:	95 23       	and	r25, r21
     d52:	09 f0       	breq	.+2      	; 0xd56 <__mulsf3+0x12>
     d54:	a2 cf       	rjmp	.-188    	; 0xc9a <__fp_inf>
     d56:	a7 cf       	rjmp	.-178    	; 0xca6 <__fp_nan>
     d58:	11 24       	eor	r1, r1
     d5a:	ea cf       	rjmp	.-44     	; 0xd30 <__fp_szero>

00000d5c <__mulsf3x>:
     d5c:	c6 df       	rcall	.-116    	; 0xcea <__fp_split3>
     d5e:	a0 f3       	brcs	.-24     	; 0xd48 <__mulsf3+0x4>

00000d60 <__mulsf3_pse>:
     d60:	95 9f       	mul	r25, r21
     d62:	d1 f3       	breq	.-12     	; 0xd58 <__mulsf3+0x14>
     d64:	95 0f       	add	r25, r21
     d66:	50 e0       	ldi	r21, 0x00	; 0
     d68:	55 1f       	adc	r21, r21
     d6a:	62 9f       	mul	r22, r18
     d6c:	f0 01       	movw	r30, r0
     d6e:	72 9f       	mul	r23, r18
     d70:	bb 27       	eor	r27, r27
     d72:	f0 0d       	add	r31, r0
     d74:	b1 1d       	adc	r27, r1
     d76:	63 9f       	mul	r22, r19
     d78:	aa 27       	eor	r26, r26
     d7a:	f0 0d       	add	r31, r0
     d7c:	b1 1d       	adc	r27, r1
     d7e:	aa 1f       	adc	r26, r26
     d80:	64 9f       	mul	r22, r20
     d82:	66 27       	eor	r22, r22
     d84:	b0 0d       	add	r27, r0
     d86:	a1 1d       	adc	r26, r1
     d88:	66 1f       	adc	r22, r22
     d8a:	82 9f       	mul	r24, r18
     d8c:	22 27       	eor	r18, r18
     d8e:	b0 0d       	add	r27, r0
     d90:	a1 1d       	adc	r26, r1
     d92:	62 1f       	adc	r22, r18
     d94:	73 9f       	mul	r23, r19
     d96:	b0 0d       	add	r27, r0
     d98:	a1 1d       	adc	r26, r1
     d9a:	62 1f       	adc	r22, r18
     d9c:	83 9f       	mul	r24, r19
     d9e:	a0 0d       	add	r26, r0
     da0:	61 1d       	adc	r22, r1
     da2:	22 1f       	adc	r18, r18
     da4:	74 9f       	mul	r23, r20
     da6:	33 27       	eor	r19, r19
     da8:	a0 0d       	add	r26, r0
     daa:	61 1d       	adc	r22, r1
     dac:	23 1f       	adc	r18, r19
     dae:	84 9f       	mul	r24, r20
     db0:	60 0d       	add	r22, r0
     db2:	21 1d       	adc	r18, r1
     db4:	82 2f       	mov	r24, r18
     db6:	76 2f       	mov	r23, r22
     db8:	6a 2f       	mov	r22, r26
     dba:	11 24       	eor	r1, r1
     dbc:	9f 57       	subi	r25, 0x7F	; 127
     dbe:	50 40       	sbci	r21, 0x00	; 0
     dc0:	8a f0       	brmi	.+34     	; 0xde4 <__mulsf3_pse+0x84>
     dc2:	e1 f0       	breq	.+56     	; 0xdfc <__mulsf3_pse+0x9c>
     dc4:	88 23       	and	r24, r24
     dc6:	4a f0       	brmi	.+18     	; 0xdda <__mulsf3_pse+0x7a>
     dc8:	ee 0f       	add	r30, r30
     dca:	ff 1f       	adc	r31, r31
     dcc:	bb 1f       	adc	r27, r27
     dce:	66 1f       	adc	r22, r22
     dd0:	77 1f       	adc	r23, r23
     dd2:	88 1f       	adc	r24, r24
     dd4:	91 50       	subi	r25, 0x01	; 1
     dd6:	50 40       	sbci	r21, 0x00	; 0
     dd8:	a9 f7       	brne	.-22     	; 0xdc4 <__mulsf3_pse+0x64>
     dda:	9e 3f       	cpi	r25, 0xFE	; 254
     ddc:	51 05       	cpc	r21, r1
     dde:	70 f0       	brcs	.+28     	; 0xdfc <__mulsf3_pse+0x9c>
     de0:	5c cf       	rjmp	.-328    	; 0xc9a <__fp_inf>
     de2:	a6 cf       	rjmp	.-180    	; 0xd30 <__fp_szero>
     de4:	5f 3f       	cpi	r21, 0xFF	; 255
     de6:	ec f3       	brlt	.-6      	; 0xde2 <__mulsf3_pse+0x82>
     de8:	98 3e       	cpi	r25, 0xE8	; 232
     dea:	dc f3       	brlt	.-10     	; 0xde2 <__mulsf3_pse+0x82>
     dec:	86 95       	lsr	r24
     dee:	77 95       	ror	r23
     df0:	67 95       	ror	r22
     df2:	b7 95       	ror	r27
     df4:	f7 95       	ror	r31
     df6:	e7 95       	ror	r30
     df8:	9f 5f       	subi	r25, 0xFF	; 255
     dfa:	c1 f7       	brne	.-16     	; 0xdec <__mulsf3_pse+0x8c>
     dfc:	fe 2b       	or	r31, r30
     dfe:	88 0f       	add	r24, r24
     e00:	91 1d       	adc	r25, r1
     e02:	96 95       	lsr	r25
     e04:	87 95       	ror	r24
     e06:	97 f9       	bld	r25, 7
     e08:	08 95       	ret

00000e0a <__divmodhi4>:
     e0a:	97 fb       	bst	r25, 7
     e0c:	07 2e       	mov	r0, r23
     e0e:	16 f4       	brtc	.+4      	; 0xe14 <__divmodhi4+0xa>
     e10:	00 94       	com	r0
     e12:	06 d0       	rcall	.+12     	; 0xe20 <__divmodhi4_neg1>
     e14:	77 fd       	sbrc	r23, 7
     e16:	08 d0       	rcall	.+16     	; 0xe28 <__divmodhi4_neg2>
     e18:	0b d0       	rcall	.+22     	; 0xe30 <__udivmodhi4>
     e1a:	07 fc       	sbrc	r0, 7
     e1c:	05 d0       	rcall	.+10     	; 0xe28 <__divmodhi4_neg2>
     e1e:	3e f4       	brtc	.+14     	; 0xe2e <__divmodhi4_exit>

00000e20 <__divmodhi4_neg1>:
     e20:	90 95       	com	r25
     e22:	81 95       	neg	r24
     e24:	9f 4f       	sbci	r25, 0xFF	; 255
     e26:	08 95       	ret

00000e28 <__divmodhi4_neg2>:
     e28:	70 95       	com	r23
     e2a:	61 95       	neg	r22
     e2c:	7f 4f       	sbci	r23, 0xFF	; 255

00000e2e <__divmodhi4_exit>:
     e2e:	08 95       	ret

00000e30 <__udivmodhi4>:
     e30:	aa 1b       	sub	r26, r26
     e32:	bb 1b       	sub	r27, r27
     e34:	51 e1       	ldi	r21, 0x11	; 17
     e36:	07 c0       	rjmp	.+14     	; 0xe46 <__udivmodhi4_ep>

00000e38 <__udivmodhi4_loop>:
     e38:	aa 1f       	adc	r26, r26
     e3a:	bb 1f       	adc	r27, r27
     e3c:	a6 17       	cp	r26, r22
     e3e:	b7 07       	cpc	r27, r23
     e40:	10 f0       	brcs	.+4      	; 0xe46 <__udivmodhi4_ep>
     e42:	a6 1b       	sub	r26, r22
     e44:	b7 0b       	sbc	r27, r23

00000e46 <__udivmodhi4_ep>:
     e46:	88 1f       	adc	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	5a 95       	dec	r21
     e4c:	a9 f7       	brne	.-22     	; 0xe38 <__udivmodhi4_loop>
     e4e:	80 95       	com	r24
     e50:	90 95       	com	r25
     e52:	bc 01       	movw	r22, r24
     e54:	cd 01       	movw	r24, r26
     e56:	08 95       	ret

00000e58 <strncmp>:
     e58:	fb 01       	movw	r30, r22
     e5a:	dc 01       	movw	r26, r24
     e5c:	41 50       	subi	r20, 0x01	; 1
     e5e:	50 40       	sbci	r21, 0x00	; 0
     e60:	30 f0       	brcs	.+12     	; 0xe6e <strncmp+0x16>
     e62:	8d 91       	ld	r24, X+
     e64:	01 90       	ld	r0, Z+
     e66:	80 19       	sub	r24, r0
     e68:	19 f4       	brne	.+6      	; 0xe70 <strncmp+0x18>
     e6a:	00 20       	and	r0, r0
     e6c:	b9 f7       	brne	.-18     	; 0xe5c <strncmp+0x4>
     e6e:	88 1b       	sub	r24, r24
     e70:	99 0b       	sbc	r25, r25
     e72:	08 95       	ret

00000e74 <printf>:
     e74:	cf 93       	push	r28
     e76:	df 93       	push	r29
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
     e7c:	ae 01       	movw	r20, r28
     e7e:	4b 5f       	subi	r20, 0xFB	; 251
     e80:	5f 4f       	sbci	r21, 0xFF	; 255
     e82:	fa 01       	movw	r30, r20
     e84:	61 91       	ld	r22, Z+
     e86:	71 91       	ld	r23, Z+
     e88:	af 01       	movw	r20, r30
     e8a:	80 91 9c 08 	lds	r24, 0x089C	; 0x80089c <__iob+0x2>
     e8e:	90 91 9d 08 	lds	r25, 0x089D	; 0x80089d <__iob+0x3>
     e92:	61 d0       	rcall	.+194    	; 0xf56 <vfprintf>
     e94:	df 91       	pop	r29
     e96:	cf 91       	pop	r28
     e98:	08 95       	ret

00000e9a <puts>:
     e9a:	0f 93       	push	r16
     e9c:	1f 93       	push	r17
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
     ea2:	e0 91 9c 08 	lds	r30, 0x089C	; 0x80089c <__iob+0x2>
     ea6:	f0 91 9d 08 	lds	r31, 0x089D	; 0x80089d <__iob+0x3>
     eaa:	23 81       	ldd	r18, Z+3	; 0x03
     eac:	21 ff       	sbrs	r18, 1
     eae:	1b c0       	rjmp	.+54     	; 0xee6 <puts+0x4c>
     eb0:	8c 01       	movw	r16, r24
     eb2:	d0 e0       	ldi	r29, 0x00	; 0
     eb4:	c0 e0       	ldi	r28, 0x00	; 0
     eb6:	f8 01       	movw	r30, r16
     eb8:	81 91       	ld	r24, Z+
     eba:	8f 01       	movw	r16, r30
     ebc:	60 91 9c 08 	lds	r22, 0x089C	; 0x80089c <__iob+0x2>
     ec0:	70 91 9d 08 	lds	r23, 0x089D	; 0x80089d <__iob+0x3>
     ec4:	db 01       	movw	r26, r22
     ec6:	18 96       	adiw	r26, 0x08	; 8
     ec8:	ed 91       	ld	r30, X+
     eca:	fc 91       	ld	r31, X
     ecc:	19 97       	sbiw	r26, 0x09	; 9
     ece:	88 23       	and	r24, r24
     ed0:	31 f0       	breq	.+12     	; 0xede <puts+0x44>
     ed2:	09 95       	icall
     ed4:	89 2b       	or	r24, r25
     ed6:	79 f3       	breq	.-34     	; 0xeb6 <puts+0x1c>
     ed8:	df ef       	ldi	r29, 0xFF	; 255
     eda:	cf ef       	ldi	r28, 0xFF	; 255
     edc:	ec cf       	rjmp	.-40     	; 0xeb6 <puts+0x1c>
     ede:	8a e0       	ldi	r24, 0x0A	; 10
     ee0:	09 95       	icall
     ee2:	89 2b       	or	r24, r25
     ee4:	19 f0       	breq	.+6      	; 0xeec <puts+0x52>
     ee6:	8f ef       	ldi	r24, 0xFF	; 255
     ee8:	9f ef       	ldi	r25, 0xFF	; 255
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <puts+0x56>
     eec:	8d 2f       	mov	r24, r29
     eee:	9c 2f       	mov	r25, r28
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	1f 91       	pop	r17
     ef6:	0f 91       	pop	r16
     ef8:	08 95       	ret

00000efa <sprintf>:
     efa:	0f 93       	push	r16
     efc:	1f 93       	push	r17
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
     f06:	2e 97       	sbiw	r28, 0x0e	; 14
     f08:	0f b6       	in	r0, 0x3f	; 63
     f0a:	f8 94       	cli
     f0c:	de bf       	out	0x3e, r29	; 62
     f0e:	0f be       	out	0x3f, r0	; 63
     f10:	cd bf       	out	0x3d, r28	; 61
     f12:	0d 89       	ldd	r16, Y+21	; 0x15
     f14:	1e 89       	ldd	r17, Y+22	; 0x16
     f16:	86 e0       	ldi	r24, 0x06	; 6
     f18:	8c 83       	std	Y+4, r24	; 0x04
     f1a:	1a 83       	std	Y+2, r17	; 0x02
     f1c:	09 83       	std	Y+1, r16	; 0x01
     f1e:	8f ef       	ldi	r24, 0xFF	; 255
     f20:	9f e7       	ldi	r25, 0x7F	; 127
     f22:	9e 83       	std	Y+6, r25	; 0x06
     f24:	8d 83       	std	Y+5, r24	; 0x05
     f26:	ae 01       	movw	r20, r28
     f28:	47 5e       	subi	r20, 0xE7	; 231
     f2a:	5f 4f       	sbci	r21, 0xFF	; 255
     f2c:	6f 89       	ldd	r22, Y+23	; 0x17
     f2e:	78 8d       	ldd	r23, Y+24	; 0x18
     f30:	ce 01       	movw	r24, r28
     f32:	01 96       	adiw	r24, 0x01	; 1
     f34:	10 d0       	rcall	.+32     	; 0xf56 <vfprintf>
     f36:	ef 81       	ldd	r30, Y+7	; 0x07
     f38:	f8 85       	ldd	r31, Y+8	; 0x08
     f3a:	e0 0f       	add	r30, r16
     f3c:	f1 1f       	adc	r31, r17
     f3e:	10 82       	st	Z, r1
     f40:	2e 96       	adiw	r28, 0x0e	; 14
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	f8 94       	cli
     f46:	de bf       	out	0x3e, r29	; 62
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	cd bf       	out	0x3d, r28	; 61
     f4c:	df 91       	pop	r29
     f4e:	cf 91       	pop	r28
     f50:	1f 91       	pop	r17
     f52:	0f 91       	pop	r16
     f54:	08 95       	ret

00000f56 <vfprintf>:
     f56:	2f 92       	push	r2
     f58:	3f 92       	push	r3
     f5a:	4f 92       	push	r4
     f5c:	5f 92       	push	r5
     f5e:	6f 92       	push	r6
     f60:	7f 92       	push	r7
     f62:	8f 92       	push	r8
     f64:	9f 92       	push	r9
     f66:	af 92       	push	r10
     f68:	bf 92       	push	r11
     f6a:	cf 92       	push	r12
     f6c:	df 92       	push	r13
     f6e:	ef 92       	push	r14
     f70:	ff 92       	push	r15
     f72:	0f 93       	push	r16
     f74:	1f 93       	push	r17
     f76:	cf 93       	push	r28
     f78:	df 93       	push	r29
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
     f7e:	2b 97       	sbiw	r28, 0x0b	; 11
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	f8 94       	cli
     f84:	de bf       	out	0x3e, r29	; 62
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	cd bf       	out	0x3d, r28	; 61
     f8a:	6c 01       	movw	r12, r24
     f8c:	7b 01       	movw	r14, r22
     f8e:	8a 01       	movw	r16, r20
     f90:	fc 01       	movw	r30, r24
     f92:	17 82       	std	Z+7, r1	; 0x07
     f94:	16 82       	std	Z+6, r1	; 0x06
     f96:	83 81       	ldd	r24, Z+3	; 0x03
     f98:	81 ff       	sbrs	r24, 1
     f9a:	bf c1       	rjmp	.+894    	; 0x131a <__stack+0x21b>
     f9c:	ce 01       	movw	r24, r28
     f9e:	01 96       	adiw	r24, 0x01	; 1
     fa0:	3c 01       	movw	r6, r24
     fa2:	f6 01       	movw	r30, r12
     fa4:	93 81       	ldd	r25, Z+3	; 0x03
     fa6:	f7 01       	movw	r30, r14
     fa8:	93 fd       	sbrc	r25, 3
     faa:	85 91       	lpm	r24, Z+
     fac:	93 ff       	sbrs	r25, 3
     fae:	81 91       	ld	r24, Z+
     fb0:	7f 01       	movw	r14, r30
     fb2:	88 23       	and	r24, r24
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <vfprintf+0x62>
     fb6:	ad c1       	rjmp	.+858    	; 0x1312 <__stack+0x213>
     fb8:	85 32       	cpi	r24, 0x25	; 37
     fba:	39 f4       	brne	.+14     	; 0xfca <vfprintf+0x74>
     fbc:	93 fd       	sbrc	r25, 3
     fbe:	85 91       	lpm	r24, Z+
     fc0:	93 ff       	sbrs	r25, 3
     fc2:	81 91       	ld	r24, Z+
     fc4:	7f 01       	movw	r14, r30
     fc6:	85 32       	cpi	r24, 0x25	; 37
     fc8:	21 f4       	brne	.+8      	; 0xfd2 <vfprintf+0x7c>
     fca:	b6 01       	movw	r22, r12
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	d6 d1       	rcall	.+940    	; 0x137c <fputc>
     fd0:	e8 cf       	rjmp	.-48     	; 0xfa2 <vfprintf+0x4c>
     fd2:	91 2c       	mov	r9, r1
     fd4:	21 2c       	mov	r2, r1
     fd6:	31 2c       	mov	r3, r1
     fd8:	ff e1       	ldi	r31, 0x1F	; 31
     fda:	f3 15       	cp	r31, r3
     fdc:	d8 f0       	brcs	.+54     	; 0x1014 <__DATA_REGION_LENGTH__+0x14>
     fde:	8b 32       	cpi	r24, 0x2B	; 43
     fe0:	79 f0       	breq	.+30     	; 0x1000 <__DATA_REGION_LENGTH__>
     fe2:	38 f4       	brcc	.+14     	; 0xff2 <vfprintf+0x9c>
     fe4:	80 32       	cpi	r24, 0x20	; 32
     fe6:	79 f0       	breq	.+30     	; 0x1006 <__DATA_REGION_LENGTH__+0x6>
     fe8:	83 32       	cpi	r24, 0x23	; 35
     fea:	a1 f4       	brne	.+40     	; 0x1014 <__DATA_REGION_LENGTH__+0x14>
     fec:	23 2d       	mov	r18, r3
     fee:	20 61       	ori	r18, 0x10	; 16
     ff0:	1d c0       	rjmp	.+58     	; 0x102c <__DATA_REGION_LENGTH__+0x2c>
     ff2:	8d 32       	cpi	r24, 0x2D	; 45
     ff4:	61 f0       	breq	.+24     	; 0x100e <__DATA_REGION_LENGTH__+0xe>
     ff6:	80 33       	cpi	r24, 0x30	; 48
     ff8:	69 f4       	brne	.+26     	; 0x1014 <__DATA_REGION_LENGTH__+0x14>
     ffa:	23 2d       	mov	r18, r3
     ffc:	21 60       	ori	r18, 0x01	; 1
     ffe:	16 c0       	rjmp	.+44     	; 0x102c <__DATA_REGION_LENGTH__+0x2c>
    1000:	83 2d       	mov	r24, r3
    1002:	82 60       	ori	r24, 0x02	; 2
    1004:	38 2e       	mov	r3, r24
    1006:	e3 2d       	mov	r30, r3
    1008:	e4 60       	ori	r30, 0x04	; 4
    100a:	3e 2e       	mov	r3, r30
    100c:	2a c0       	rjmp	.+84     	; 0x1062 <__DATA_REGION_LENGTH__+0x62>
    100e:	f3 2d       	mov	r31, r3
    1010:	f8 60       	ori	r31, 0x08	; 8
    1012:	1d c0       	rjmp	.+58     	; 0x104e <__DATA_REGION_LENGTH__+0x4e>
    1014:	37 fc       	sbrc	r3, 7
    1016:	2d c0       	rjmp	.+90     	; 0x1072 <__DATA_REGION_LENGTH__+0x72>
    1018:	20 ed       	ldi	r18, 0xD0	; 208
    101a:	28 0f       	add	r18, r24
    101c:	2a 30       	cpi	r18, 0x0A	; 10
    101e:	40 f0       	brcs	.+16     	; 0x1030 <__DATA_REGION_LENGTH__+0x30>
    1020:	8e 32       	cpi	r24, 0x2E	; 46
    1022:	b9 f4       	brne	.+46     	; 0x1052 <__DATA_REGION_LENGTH__+0x52>
    1024:	36 fc       	sbrc	r3, 6
    1026:	75 c1       	rjmp	.+746    	; 0x1312 <__stack+0x213>
    1028:	23 2d       	mov	r18, r3
    102a:	20 64       	ori	r18, 0x40	; 64
    102c:	32 2e       	mov	r3, r18
    102e:	19 c0       	rjmp	.+50     	; 0x1062 <__DATA_REGION_LENGTH__+0x62>
    1030:	36 fe       	sbrs	r3, 6
    1032:	06 c0       	rjmp	.+12     	; 0x1040 <__DATA_REGION_LENGTH__+0x40>
    1034:	8a e0       	ldi	r24, 0x0A	; 10
    1036:	98 9e       	mul	r9, r24
    1038:	20 0d       	add	r18, r0
    103a:	11 24       	eor	r1, r1
    103c:	92 2e       	mov	r9, r18
    103e:	11 c0       	rjmp	.+34     	; 0x1062 <__DATA_REGION_LENGTH__+0x62>
    1040:	ea e0       	ldi	r30, 0x0A	; 10
    1042:	2e 9e       	mul	r2, r30
    1044:	20 0d       	add	r18, r0
    1046:	11 24       	eor	r1, r1
    1048:	22 2e       	mov	r2, r18
    104a:	f3 2d       	mov	r31, r3
    104c:	f0 62       	ori	r31, 0x20	; 32
    104e:	3f 2e       	mov	r3, r31
    1050:	08 c0       	rjmp	.+16     	; 0x1062 <__DATA_REGION_LENGTH__+0x62>
    1052:	8c 36       	cpi	r24, 0x6C	; 108
    1054:	21 f4       	brne	.+8      	; 0x105e <__DATA_REGION_LENGTH__+0x5e>
    1056:	83 2d       	mov	r24, r3
    1058:	80 68       	ori	r24, 0x80	; 128
    105a:	38 2e       	mov	r3, r24
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <__DATA_REGION_LENGTH__+0x62>
    105e:	88 36       	cpi	r24, 0x68	; 104
    1060:	41 f4       	brne	.+16     	; 0x1072 <__DATA_REGION_LENGTH__+0x72>
    1062:	f7 01       	movw	r30, r14
    1064:	93 fd       	sbrc	r25, 3
    1066:	85 91       	lpm	r24, Z+
    1068:	93 ff       	sbrs	r25, 3
    106a:	81 91       	ld	r24, Z+
    106c:	7f 01       	movw	r14, r30
    106e:	81 11       	cpse	r24, r1
    1070:	b3 cf       	rjmp	.-154    	; 0xfd8 <vfprintf+0x82>
    1072:	98 2f       	mov	r25, r24
    1074:	9f 7d       	andi	r25, 0xDF	; 223
    1076:	95 54       	subi	r25, 0x45	; 69
    1078:	93 30       	cpi	r25, 0x03	; 3
    107a:	28 f4       	brcc	.+10     	; 0x1086 <__DATA_REGION_LENGTH__+0x86>
    107c:	0c 5f       	subi	r16, 0xFC	; 252
    107e:	1f 4f       	sbci	r17, 0xFF	; 255
    1080:	9f e3       	ldi	r25, 0x3F	; 63
    1082:	99 83       	std	Y+1, r25	; 0x01
    1084:	0d c0       	rjmp	.+26     	; 0x10a0 <__DATA_REGION_LENGTH__+0xa0>
    1086:	83 36       	cpi	r24, 0x63	; 99
    1088:	31 f0       	breq	.+12     	; 0x1096 <__DATA_REGION_LENGTH__+0x96>
    108a:	83 37       	cpi	r24, 0x73	; 115
    108c:	71 f0       	breq	.+28     	; 0x10aa <__DATA_REGION_LENGTH__+0xaa>
    108e:	83 35       	cpi	r24, 0x53	; 83
    1090:	09 f0       	breq	.+2      	; 0x1094 <__DATA_REGION_LENGTH__+0x94>
    1092:	55 c0       	rjmp	.+170    	; 0x113e <__stack+0x3f>
    1094:	20 c0       	rjmp	.+64     	; 0x10d6 <__DATA_REGION_LENGTH__+0xd6>
    1096:	f8 01       	movw	r30, r16
    1098:	80 81       	ld	r24, Z
    109a:	89 83       	std	Y+1, r24	; 0x01
    109c:	0e 5f       	subi	r16, 0xFE	; 254
    109e:	1f 4f       	sbci	r17, 0xFF	; 255
    10a0:	88 24       	eor	r8, r8
    10a2:	83 94       	inc	r8
    10a4:	91 2c       	mov	r9, r1
    10a6:	53 01       	movw	r10, r6
    10a8:	12 c0       	rjmp	.+36     	; 0x10ce <__DATA_REGION_LENGTH__+0xce>
    10aa:	28 01       	movw	r4, r16
    10ac:	f2 e0       	ldi	r31, 0x02	; 2
    10ae:	4f 0e       	add	r4, r31
    10b0:	51 1c       	adc	r5, r1
    10b2:	f8 01       	movw	r30, r16
    10b4:	a0 80       	ld	r10, Z
    10b6:	b1 80       	ldd	r11, Z+1	; 0x01
    10b8:	36 fe       	sbrs	r3, 6
    10ba:	03 c0       	rjmp	.+6      	; 0x10c2 <__DATA_REGION_LENGTH__+0xc2>
    10bc:	69 2d       	mov	r22, r9
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <__DATA_REGION_LENGTH__+0xc6>
    10c2:	6f ef       	ldi	r22, 0xFF	; 255
    10c4:	7f ef       	ldi	r23, 0xFF	; 255
    10c6:	c5 01       	movw	r24, r10
    10c8:	4e d1       	rcall	.+668    	; 0x1366 <strnlen>
    10ca:	4c 01       	movw	r8, r24
    10cc:	82 01       	movw	r16, r4
    10ce:	f3 2d       	mov	r31, r3
    10d0:	ff 77       	andi	r31, 0x7F	; 127
    10d2:	3f 2e       	mov	r3, r31
    10d4:	15 c0       	rjmp	.+42     	; 0x1100 <__stack+0x1>
    10d6:	28 01       	movw	r4, r16
    10d8:	22 e0       	ldi	r18, 0x02	; 2
    10da:	42 0e       	add	r4, r18
    10dc:	51 1c       	adc	r5, r1
    10de:	f8 01       	movw	r30, r16
    10e0:	a0 80       	ld	r10, Z
    10e2:	b1 80       	ldd	r11, Z+1	; 0x01
    10e4:	36 fe       	sbrs	r3, 6
    10e6:	03 c0       	rjmp	.+6      	; 0x10ee <__DATA_REGION_LENGTH__+0xee>
    10e8:	69 2d       	mov	r22, r9
    10ea:	70 e0       	ldi	r23, 0x00	; 0
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <__DATA_REGION_LENGTH__+0xf2>
    10ee:	6f ef       	ldi	r22, 0xFF	; 255
    10f0:	7f ef       	ldi	r23, 0xFF	; 255
    10f2:	c5 01       	movw	r24, r10
    10f4:	2d d1       	rcall	.+602    	; 0x1350 <strnlen_P>
    10f6:	4c 01       	movw	r8, r24
    10f8:	f3 2d       	mov	r31, r3
    10fa:	f0 68       	ori	r31, 0x80	; 128
    10fc:	3f 2e       	mov	r3, r31
    10fe:	82 01       	movw	r16, r4
    1100:	33 fc       	sbrc	r3, 3
    1102:	19 c0       	rjmp	.+50     	; 0x1136 <__stack+0x37>
    1104:	82 2d       	mov	r24, r2
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	88 16       	cp	r8, r24
    110a:	99 06       	cpc	r9, r25
    110c:	a0 f4       	brcc	.+40     	; 0x1136 <__stack+0x37>
    110e:	b6 01       	movw	r22, r12
    1110:	80 e2       	ldi	r24, 0x20	; 32
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	33 d1       	rcall	.+614    	; 0x137c <fputc>
    1116:	2a 94       	dec	r2
    1118:	f5 cf       	rjmp	.-22     	; 0x1104 <__stack+0x5>
    111a:	f5 01       	movw	r30, r10
    111c:	37 fc       	sbrc	r3, 7
    111e:	85 91       	lpm	r24, Z+
    1120:	37 fe       	sbrs	r3, 7
    1122:	81 91       	ld	r24, Z+
    1124:	5f 01       	movw	r10, r30
    1126:	b6 01       	movw	r22, r12
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	28 d1       	rcall	.+592    	; 0x137c <fputc>
    112c:	21 10       	cpse	r2, r1
    112e:	2a 94       	dec	r2
    1130:	21 e0       	ldi	r18, 0x01	; 1
    1132:	82 1a       	sub	r8, r18
    1134:	91 08       	sbc	r9, r1
    1136:	81 14       	cp	r8, r1
    1138:	91 04       	cpc	r9, r1
    113a:	79 f7       	brne	.-34     	; 0x111a <__stack+0x1b>
    113c:	e1 c0       	rjmp	.+450    	; 0x1300 <__stack+0x201>
    113e:	84 36       	cpi	r24, 0x64	; 100
    1140:	11 f0       	breq	.+4      	; 0x1146 <__stack+0x47>
    1142:	89 36       	cpi	r24, 0x69	; 105
    1144:	39 f5       	brne	.+78     	; 0x1194 <__stack+0x95>
    1146:	f8 01       	movw	r30, r16
    1148:	37 fe       	sbrs	r3, 7
    114a:	07 c0       	rjmp	.+14     	; 0x115a <__stack+0x5b>
    114c:	60 81       	ld	r22, Z
    114e:	71 81       	ldd	r23, Z+1	; 0x01
    1150:	82 81       	ldd	r24, Z+2	; 0x02
    1152:	93 81       	ldd	r25, Z+3	; 0x03
    1154:	0c 5f       	subi	r16, 0xFC	; 252
    1156:	1f 4f       	sbci	r17, 0xFF	; 255
    1158:	08 c0       	rjmp	.+16     	; 0x116a <__stack+0x6b>
    115a:	60 81       	ld	r22, Z
    115c:	71 81       	ldd	r23, Z+1	; 0x01
    115e:	07 2e       	mov	r0, r23
    1160:	00 0c       	add	r0, r0
    1162:	88 0b       	sbc	r24, r24
    1164:	99 0b       	sbc	r25, r25
    1166:	0e 5f       	subi	r16, 0xFE	; 254
    1168:	1f 4f       	sbci	r17, 0xFF	; 255
    116a:	f3 2d       	mov	r31, r3
    116c:	ff 76       	andi	r31, 0x6F	; 111
    116e:	3f 2e       	mov	r3, r31
    1170:	97 ff       	sbrs	r25, 7
    1172:	09 c0       	rjmp	.+18     	; 0x1186 <__stack+0x87>
    1174:	90 95       	com	r25
    1176:	80 95       	com	r24
    1178:	70 95       	com	r23
    117a:	61 95       	neg	r22
    117c:	7f 4f       	sbci	r23, 0xFF	; 255
    117e:	8f 4f       	sbci	r24, 0xFF	; 255
    1180:	9f 4f       	sbci	r25, 0xFF	; 255
    1182:	f0 68       	ori	r31, 0x80	; 128
    1184:	3f 2e       	mov	r3, r31
    1186:	2a e0       	ldi	r18, 0x0A	; 10
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	a3 01       	movw	r20, r6
    118c:	33 d1       	rcall	.+614    	; 0x13f4 <__ultoa_invert>
    118e:	88 2e       	mov	r8, r24
    1190:	86 18       	sub	r8, r6
    1192:	44 c0       	rjmp	.+136    	; 0x121c <__stack+0x11d>
    1194:	85 37       	cpi	r24, 0x75	; 117
    1196:	31 f4       	brne	.+12     	; 0x11a4 <__stack+0xa5>
    1198:	23 2d       	mov	r18, r3
    119a:	2f 7e       	andi	r18, 0xEF	; 239
    119c:	b2 2e       	mov	r11, r18
    119e:	2a e0       	ldi	r18, 0x0A	; 10
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	25 c0       	rjmp	.+74     	; 0x11ee <__stack+0xef>
    11a4:	93 2d       	mov	r25, r3
    11a6:	99 7f       	andi	r25, 0xF9	; 249
    11a8:	b9 2e       	mov	r11, r25
    11aa:	8f 36       	cpi	r24, 0x6F	; 111
    11ac:	c1 f0       	breq	.+48     	; 0x11de <__stack+0xdf>
    11ae:	18 f4       	brcc	.+6      	; 0x11b6 <__stack+0xb7>
    11b0:	88 35       	cpi	r24, 0x58	; 88
    11b2:	79 f0       	breq	.+30     	; 0x11d2 <__stack+0xd3>
    11b4:	ae c0       	rjmp	.+348    	; 0x1312 <__stack+0x213>
    11b6:	80 37       	cpi	r24, 0x70	; 112
    11b8:	19 f0       	breq	.+6      	; 0x11c0 <__stack+0xc1>
    11ba:	88 37       	cpi	r24, 0x78	; 120
    11bc:	21 f0       	breq	.+8      	; 0x11c6 <__stack+0xc7>
    11be:	a9 c0       	rjmp	.+338    	; 0x1312 <__stack+0x213>
    11c0:	e9 2f       	mov	r30, r25
    11c2:	e0 61       	ori	r30, 0x10	; 16
    11c4:	be 2e       	mov	r11, r30
    11c6:	b4 fe       	sbrs	r11, 4
    11c8:	0d c0       	rjmp	.+26     	; 0x11e4 <__stack+0xe5>
    11ca:	fb 2d       	mov	r31, r11
    11cc:	f4 60       	ori	r31, 0x04	; 4
    11ce:	bf 2e       	mov	r11, r31
    11d0:	09 c0       	rjmp	.+18     	; 0x11e4 <__stack+0xe5>
    11d2:	34 fe       	sbrs	r3, 4
    11d4:	0a c0       	rjmp	.+20     	; 0x11ea <__stack+0xeb>
    11d6:	29 2f       	mov	r18, r25
    11d8:	26 60       	ori	r18, 0x06	; 6
    11da:	b2 2e       	mov	r11, r18
    11dc:	06 c0       	rjmp	.+12     	; 0x11ea <__stack+0xeb>
    11de:	28 e0       	ldi	r18, 0x08	; 8
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	05 c0       	rjmp	.+10     	; 0x11ee <__stack+0xef>
    11e4:	20 e1       	ldi	r18, 0x10	; 16
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <__stack+0xef>
    11ea:	20 e1       	ldi	r18, 0x10	; 16
    11ec:	32 e0       	ldi	r19, 0x02	; 2
    11ee:	f8 01       	movw	r30, r16
    11f0:	b7 fe       	sbrs	r11, 7
    11f2:	07 c0       	rjmp	.+14     	; 0x1202 <__stack+0x103>
    11f4:	60 81       	ld	r22, Z
    11f6:	71 81       	ldd	r23, Z+1	; 0x01
    11f8:	82 81       	ldd	r24, Z+2	; 0x02
    11fa:	93 81       	ldd	r25, Z+3	; 0x03
    11fc:	0c 5f       	subi	r16, 0xFC	; 252
    11fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1200:	06 c0       	rjmp	.+12     	; 0x120e <__stack+0x10f>
    1202:	60 81       	ld	r22, Z
    1204:	71 81       	ldd	r23, Z+1	; 0x01
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	0e 5f       	subi	r16, 0xFE	; 254
    120c:	1f 4f       	sbci	r17, 0xFF	; 255
    120e:	a3 01       	movw	r20, r6
    1210:	f1 d0       	rcall	.+482    	; 0x13f4 <__ultoa_invert>
    1212:	88 2e       	mov	r8, r24
    1214:	86 18       	sub	r8, r6
    1216:	fb 2d       	mov	r31, r11
    1218:	ff 77       	andi	r31, 0x7F	; 127
    121a:	3f 2e       	mov	r3, r31
    121c:	36 fe       	sbrs	r3, 6
    121e:	0d c0       	rjmp	.+26     	; 0x123a <__stack+0x13b>
    1220:	23 2d       	mov	r18, r3
    1222:	2e 7f       	andi	r18, 0xFE	; 254
    1224:	a2 2e       	mov	r10, r18
    1226:	89 14       	cp	r8, r9
    1228:	58 f4       	brcc	.+22     	; 0x1240 <__stack+0x141>
    122a:	34 fe       	sbrs	r3, 4
    122c:	0b c0       	rjmp	.+22     	; 0x1244 <__stack+0x145>
    122e:	32 fc       	sbrc	r3, 2
    1230:	09 c0       	rjmp	.+18     	; 0x1244 <__stack+0x145>
    1232:	83 2d       	mov	r24, r3
    1234:	8e 7e       	andi	r24, 0xEE	; 238
    1236:	a8 2e       	mov	r10, r24
    1238:	05 c0       	rjmp	.+10     	; 0x1244 <__stack+0x145>
    123a:	b8 2c       	mov	r11, r8
    123c:	a3 2c       	mov	r10, r3
    123e:	03 c0       	rjmp	.+6      	; 0x1246 <__stack+0x147>
    1240:	b8 2c       	mov	r11, r8
    1242:	01 c0       	rjmp	.+2      	; 0x1246 <__stack+0x147>
    1244:	b9 2c       	mov	r11, r9
    1246:	a4 fe       	sbrs	r10, 4
    1248:	0f c0       	rjmp	.+30     	; 0x1268 <__stack+0x169>
    124a:	fe 01       	movw	r30, r28
    124c:	e8 0d       	add	r30, r8
    124e:	f1 1d       	adc	r31, r1
    1250:	80 81       	ld	r24, Z
    1252:	80 33       	cpi	r24, 0x30	; 48
    1254:	21 f4       	brne	.+8      	; 0x125e <__stack+0x15f>
    1256:	9a 2d       	mov	r25, r10
    1258:	99 7e       	andi	r25, 0xE9	; 233
    125a:	a9 2e       	mov	r10, r25
    125c:	09 c0       	rjmp	.+18     	; 0x1270 <__stack+0x171>
    125e:	a2 fe       	sbrs	r10, 2
    1260:	06 c0       	rjmp	.+12     	; 0x126e <__stack+0x16f>
    1262:	b3 94       	inc	r11
    1264:	b3 94       	inc	r11
    1266:	04 c0       	rjmp	.+8      	; 0x1270 <__stack+0x171>
    1268:	8a 2d       	mov	r24, r10
    126a:	86 78       	andi	r24, 0x86	; 134
    126c:	09 f0       	breq	.+2      	; 0x1270 <__stack+0x171>
    126e:	b3 94       	inc	r11
    1270:	a3 fc       	sbrc	r10, 3
    1272:	10 c0       	rjmp	.+32     	; 0x1294 <__stack+0x195>
    1274:	a0 fe       	sbrs	r10, 0
    1276:	06 c0       	rjmp	.+12     	; 0x1284 <__stack+0x185>
    1278:	b2 14       	cp	r11, r2
    127a:	80 f4       	brcc	.+32     	; 0x129c <__stack+0x19d>
    127c:	28 0c       	add	r2, r8
    127e:	92 2c       	mov	r9, r2
    1280:	9b 18       	sub	r9, r11
    1282:	0d c0       	rjmp	.+26     	; 0x129e <__stack+0x19f>
    1284:	b2 14       	cp	r11, r2
    1286:	58 f4       	brcc	.+22     	; 0x129e <__stack+0x19f>
    1288:	b6 01       	movw	r22, r12
    128a:	80 e2       	ldi	r24, 0x20	; 32
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	76 d0       	rcall	.+236    	; 0x137c <fputc>
    1290:	b3 94       	inc	r11
    1292:	f8 cf       	rjmp	.-16     	; 0x1284 <__stack+0x185>
    1294:	b2 14       	cp	r11, r2
    1296:	18 f4       	brcc	.+6      	; 0x129e <__stack+0x19f>
    1298:	2b 18       	sub	r2, r11
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <__stack+0x1a1>
    129c:	98 2c       	mov	r9, r8
    129e:	21 2c       	mov	r2, r1
    12a0:	a4 fe       	sbrs	r10, 4
    12a2:	0f c0       	rjmp	.+30     	; 0x12c2 <__stack+0x1c3>
    12a4:	b6 01       	movw	r22, r12
    12a6:	80 e3       	ldi	r24, 0x30	; 48
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	68 d0       	rcall	.+208    	; 0x137c <fputc>
    12ac:	a2 fe       	sbrs	r10, 2
    12ae:	16 c0       	rjmp	.+44     	; 0x12dc <__stack+0x1dd>
    12b0:	a1 fc       	sbrc	r10, 1
    12b2:	03 c0       	rjmp	.+6      	; 0x12ba <__stack+0x1bb>
    12b4:	88 e7       	ldi	r24, 0x78	; 120
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <__stack+0x1bf>
    12ba:	88 e5       	ldi	r24, 0x58	; 88
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	b6 01       	movw	r22, r12
    12c0:	0c c0       	rjmp	.+24     	; 0x12da <__stack+0x1db>
    12c2:	8a 2d       	mov	r24, r10
    12c4:	86 78       	andi	r24, 0x86	; 134
    12c6:	51 f0       	breq	.+20     	; 0x12dc <__stack+0x1dd>
    12c8:	a1 fe       	sbrs	r10, 1
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <__stack+0x1d1>
    12cc:	8b e2       	ldi	r24, 0x2B	; 43
    12ce:	01 c0       	rjmp	.+2      	; 0x12d2 <__stack+0x1d3>
    12d0:	80 e2       	ldi	r24, 0x20	; 32
    12d2:	a7 fc       	sbrc	r10, 7
    12d4:	8d e2       	ldi	r24, 0x2D	; 45
    12d6:	b6 01       	movw	r22, r12
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	50 d0       	rcall	.+160    	; 0x137c <fputc>
    12dc:	89 14       	cp	r8, r9
    12de:	30 f4       	brcc	.+12     	; 0x12ec <__stack+0x1ed>
    12e0:	b6 01       	movw	r22, r12
    12e2:	80 e3       	ldi	r24, 0x30	; 48
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	4a d0       	rcall	.+148    	; 0x137c <fputc>
    12e8:	9a 94       	dec	r9
    12ea:	f8 cf       	rjmp	.-16     	; 0x12dc <__stack+0x1dd>
    12ec:	8a 94       	dec	r8
    12ee:	f3 01       	movw	r30, r6
    12f0:	e8 0d       	add	r30, r8
    12f2:	f1 1d       	adc	r31, r1
    12f4:	80 81       	ld	r24, Z
    12f6:	b6 01       	movw	r22, r12
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	40 d0       	rcall	.+128    	; 0x137c <fputc>
    12fc:	81 10       	cpse	r8, r1
    12fe:	f6 cf       	rjmp	.-20     	; 0x12ec <__stack+0x1ed>
    1300:	22 20       	and	r2, r2
    1302:	09 f4       	brne	.+2      	; 0x1306 <__stack+0x207>
    1304:	4e ce       	rjmp	.-868    	; 0xfa2 <vfprintf+0x4c>
    1306:	b6 01       	movw	r22, r12
    1308:	80 e2       	ldi	r24, 0x20	; 32
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	37 d0       	rcall	.+110    	; 0x137c <fputc>
    130e:	2a 94       	dec	r2
    1310:	f7 cf       	rjmp	.-18     	; 0x1300 <__stack+0x201>
    1312:	f6 01       	movw	r30, r12
    1314:	86 81       	ldd	r24, Z+6	; 0x06
    1316:	97 81       	ldd	r25, Z+7	; 0x07
    1318:	02 c0       	rjmp	.+4      	; 0x131e <__stack+0x21f>
    131a:	8f ef       	ldi	r24, 0xFF	; 255
    131c:	9f ef       	ldi	r25, 0xFF	; 255
    131e:	2b 96       	adiw	r28, 0x0b	; 11
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	f8 94       	cli
    1324:	de bf       	out	0x3e, r29	; 62
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	cd bf       	out	0x3d, r28	; 61
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	1f 91       	pop	r17
    1330:	0f 91       	pop	r16
    1332:	ff 90       	pop	r15
    1334:	ef 90       	pop	r14
    1336:	df 90       	pop	r13
    1338:	cf 90       	pop	r12
    133a:	bf 90       	pop	r11
    133c:	af 90       	pop	r10
    133e:	9f 90       	pop	r9
    1340:	8f 90       	pop	r8
    1342:	7f 90       	pop	r7
    1344:	6f 90       	pop	r6
    1346:	5f 90       	pop	r5
    1348:	4f 90       	pop	r4
    134a:	3f 90       	pop	r3
    134c:	2f 90       	pop	r2
    134e:	08 95       	ret

00001350 <strnlen_P>:
    1350:	fc 01       	movw	r30, r24
    1352:	05 90       	lpm	r0, Z+
    1354:	61 50       	subi	r22, 0x01	; 1
    1356:	70 40       	sbci	r23, 0x00	; 0
    1358:	01 10       	cpse	r0, r1
    135a:	d8 f7       	brcc	.-10     	; 0x1352 <strnlen_P+0x2>
    135c:	80 95       	com	r24
    135e:	90 95       	com	r25
    1360:	8e 0f       	add	r24, r30
    1362:	9f 1f       	adc	r25, r31
    1364:	08 95       	ret

00001366 <strnlen>:
    1366:	fc 01       	movw	r30, r24
    1368:	61 50       	subi	r22, 0x01	; 1
    136a:	70 40       	sbci	r23, 0x00	; 0
    136c:	01 90       	ld	r0, Z+
    136e:	01 10       	cpse	r0, r1
    1370:	d8 f7       	brcc	.-10     	; 0x1368 <strnlen+0x2>
    1372:	80 95       	com	r24
    1374:	90 95       	com	r25
    1376:	8e 0f       	add	r24, r30
    1378:	9f 1f       	adc	r25, r31
    137a:	08 95       	ret

0000137c <fputc>:
    137c:	0f 93       	push	r16
    137e:	1f 93       	push	r17
    1380:	cf 93       	push	r28
    1382:	df 93       	push	r29
    1384:	fb 01       	movw	r30, r22
    1386:	23 81       	ldd	r18, Z+3	; 0x03
    1388:	21 fd       	sbrc	r18, 1
    138a:	03 c0       	rjmp	.+6      	; 0x1392 <fputc+0x16>
    138c:	8f ef       	ldi	r24, 0xFF	; 255
    138e:	9f ef       	ldi	r25, 0xFF	; 255
    1390:	2c c0       	rjmp	.+88     	; 0x13ea <fputc+0x6e>
    1392:	22 ff       	sbrs	r18, 2
    1394:	16 c0       	rjmp	.+44     	; 0x13c2 <fputc+0x46>
    1396:	46 81       	ldd	r20, Z+6	; 0x06
    1398:	57 81       	ldd	r21, Z+7	; 0x07
    139a:	24 81       	ldd	r18, Z+4	; 0x04
    139c:	35 81       	ldd	r19, Z+5	; 0x05
    139e:	42 17       	cp	r20, r18
    13a0:	53 07       	cpc	r21, r19
    13a2:	44 f4       	brge	.+16     	; 0x13b4 <fputc+0x38>
    13a4:	a0 81       	ld	r26, Z
    13a6:	b1 81       	ldd	r27, Z+1	; 0x01
    13a8:	9d 01       	movw	r18, r26
    13aa:	2f 5f       	subi	r18, 0xFF	; 255
    13ac:	3f 4f       	sbci	r19, 0xFF	; 255
    13ae:	31 83       	std	Z+1, r19	; 0x01
    13b0:	20 83       	st	Z, r18
    13b2:	8c 93       	st	X, r24
    13b4:	26 81       	ldd	r18, Z+6	; 0x06
    13b6:	37 81       	ldd	r19, Z+7	; 0x07
    13b8:	2f 5f       	subi	r18, 0xFF	; 255
    13ba:	3f 4f       	sbci	r19, 0xFF	; 255
    13bc:	37 83       	std	Z+7, r19	; 0x07
    13be:	26 83       	std	Z+6, r18	; 0x06
    13c0:	14 c0       	rjmp	.+40     	; 0x13ea <fputc+0x6e>
    13c2:	8b 01       	movw	r16, r22
    13c4:	ec 01       	movw	r28, r24
    13c6:	fb 01       	movw	r30, r22
    13c8:	00 84       	ldd	r0, Z+8	; 0x08
    13ca:	f1 85       	ldd	r31, Z+9	; 0x09
    13cc:	e0 2d       	mov	r30, r0
    13ce:	09 95       	icall
    13d0:	89 2b       	or	r24, r25
    13d2:	e1 f6       	brne	.-72     	; 0x138c <fputc+0x10>
    13d4:	d8 01       	movw	r26, r16
    13d6:	16 96       	adiw	r26, 0x06	; 6
    13d8:	8d 91       	ld	r24, X+
    13da:	9c 91       	ld	r25, X
    13dc:	17 97       	sbiw	r26, 0x07	; 7
    13de:	01 96       	adiw	r24, 0x01	; 1
    13e0:	17 96       	adiw	r26, 0x07	; 7
    13e2:	9c 93       	st	X, r25
    13e4:	8e 93       	st	-X, r24
    13e6:	16 97       	sbiw	r26, 0x06	; 6
    13e8:	ce 01       	movw	r24, r28
    13ea:	df 91       	pop	r29
    13ec:	cf 91       	pop	r28
    13ee:	1f 91       	pop	r17
    13f0:	0f 91       	pop	r16
    13f2:	08 95       	ret

000013f4 <__ultoa_invert>:
    13f4:	fa 01       	movw	r30, r20
    13f6:	aa 27       	eor	r26, r26
    13f8:	28 30       	cpi	r18, 0x08	; 8
    13fa:	51 f1       	breq	.+84     	; 0x1450 <__ultoa_invert+0x5c>
    13fc:	20 31       	cpi	r18, 0x10	; 16
    13fe:	81 f1       	breq	.+96     	; 0x1460 <__ultoa_invert+0x6c>
    1400:	e8 94       	clt
    1402:	6f 93       	push	r22
    1404:	6e 7f       	andi	r22, 0xFE	; 254
    1406:	6e 5f       	subi	r22, 0xFE	; 254
    1408:	7f 4f       	sbci	r23, 0xFF	; 255
    140a:	8f 4f       	sbci	r24, 0xFF	; 255
    140c:	9f 4f       	sbci	r25, 0xFF	; 255
    140e:	af 4f       	sbci	r26, 0xFF	; 255
    1410:	b1 e0       	ldi	r27, 0x01	; 1
    1412:	3e d0       	rcall	.+124    	; 0x1490 <__ultoa_invert+0x9c>
    1414:	b4 e0       	ldi	r27, 0x04	; 4
    1416:	3c d0       	rcall	.+120    	; 0x1490 <__ultoa_invert+0x9c>
    1418:	67 0f       	add	r22, r23
    141a:	78 1f       	adc	r23, r24
    141c:	89 1f       	adc	r24, r25
    141e:	9a 1f       	adc	r25, r26
    1420:	a1 1d       	adc	r26, r1
    1422:	68 0f       	add	r22, r24
    1424:	79 1f       	adc	r23, r25
    1426:	8a 1f       	adc	r24, r26
    1428:	91 1d       	adc	r25, r1
    142a:	a1 1d       	adc	r26, r1
    142c:	6a 0f       	add	r22, r26
    142e:	71 1d       	adc	r23, r1
    1430:	81 1d       	adc	r24, r1
    1432:	91 1d       	adc	r25, r1
    1434:	a1 1d       	adc	r26, r1
    1436:	20 d0       	rcall	.+64     	; 0x1478 <__ultoa_invert+0x84>
    1438:	09 f4       	brne	.+2      	; 0x143c <__ultoa_invert+0x48>
    143a:	68 94       	set
    143c:	3f 91       	pop	r19
    143e:	2a e0       	ldi	r18, 0x0A	; 10
    1440:	26 9f       	mul	r18, r22
    1442:	11 24       	eor	r1, r1
    1444:	30 19       	sub	r19, r0
    1446:	30 5d       	subi	r19, 0xD0	; 208
    1448:	31 93       	st	Z+, r19
    144a:	de f6       	brtc	.-74     	; 0x1402 <__ultoa_invert+0xe>
    144c:	cf 01       	movw	r24, r30
    144e:	08 95       	ret
    1450:	46 2f       	mov	r20, r22
    1452:	47 70       	andi	r20, 0x07	; 7
    1454:	40 5d       	subi	r20, 0xD0	; 208
    1456:	41 93       	st	Z+, r20
    1458:	b3 e0       	ldi	r27, 0x03	; 3
    145a:	0f d0       	rcall	.+30     	; 0x147a <__ultoa_invert+0x86>
    145c:	c9 f7       	brne	.-14     	; 0x1450 <__ultoa_invert+0x5c>
    145e:	f6 cf       	rjmp	.-20     	; 0x144c <__ultoa_invert+0x58>
    1460:	46 2f       	mov	r20, r22
    1462:	4f 70       	andi	r20, 0x0F	; 15
    1464:	40 5d       	subi	r20, 0xD0	; 208
    1466:	4a 33       	cpi	r20, 0x3A	; 58
    1468:	18 f0       	brcs	.+6      	; 0x1470 <__ultoa_invert+0x7c>
    146a:	49 5d       	subi	r20, 0xD9	; 217
    146c:	31 fd       	sbrc	r19, 1
    146e:	40 52       	subi	r20, 0x20	; 32
    1470:	41 93       	st	Z+, r20
    1472:	02 d0       	rcall	.+4      	; 0x1478 <__ultoa_invert+0x84>
    1474:	a9 f7       	brne	.-22     	; 0x1460 <__ultoa_invert+0x6c>
    1476:	ea cf       	rjmp	.-44     	; 0x144c <__ultoa_invert+0x58>
    1478:	b4 e0       	ldi	r27, 0x04	; 4
    147a:	a6 95       	lsr	r26
    147c:	97 95       	ror	r25
    147e:	87 95       	ror	r24
    1480:	77 95       	ror	r23
    1482:	67 95       	ror	r22
    1484:	ba 95       	dec	r27
    1486:	c9 f7       	brne	.-14     	; 0x147a <__ultoa_invert+0x86>
    1488:	00 97       	sbiw	r24, 0x00	; 0
    148a:	61 05       	cpc	r22, r1
    148c:	71 05       	cpc	r23, r1
    148e:	08 95       	ret
    1490:	9b 01       	movw	r18, r22
    1492:	ac 01       	movw	r20, r24
    1494:	0a 2e       	mov	r0, r26
    1496:	06 94       	lsr	r0
    1498:	57 95       	ror	r21
    149a:	47 95       	ror	r20
    149c:	37 95       	ror	r19
    149e:	27 95       	ror	r18
    14a0:	ba 95       	dec	r27
    14a2:	c9 f7       	brne	.-14     	; 0x1496 <__ultoa_invert+0xa2>
    14a4:	62 0f       	add	r22, r18
    14a6:	73 1f       	adc	r23, r19
    14a8:	84 1f       	adc	r24, r20
    14aa:	95 1f       	adc	r25, r21
    14ac:	a0 1d       	adc	r26, r0
    14ae:	08 95       	ret

000014b0 <_exit>:
    14b0:	f8 94       	cli

000014b2 <__stop_program>:
    14b2:	ff cf       	rjmp	.-2      	; 0x14b2 <__stop_program>
